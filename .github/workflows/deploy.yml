name: Deploy to ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # 允许手动触发

jobs:
  # 1. 代码验证Job（轻量级）
  validate:
    name: Code Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Remove pnpm lock file
        run: rm -f pnpm-lock.yaml

      - name: Install dependencies (validation only)
        run: npm install

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint || echo "Lint检查完成（允许警告）"

  # 2. 触发ECS本地构建和部署Job
  deploy:
    name: ECS Local Build and Deploy
    runs-on: ubuntu-latest
    needs: validate
    # 只在主分支推送时部署或手动触发时
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to ECS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            #!/bin/bash
            set -e

            echo "🚀 开始ECS本地构建部署流程..."
            echo "📅 部署时间: $(date)"

            # 定义变量
            PROJECT_DIR="/www/wwwroot/easy-erp-web"
            BACKUP_DIR="/www/wwwroot/easy-erp-web-backup-$(date +%Y%m%d-%H%M%S)"

            # 1. 备份当前版本
            if [ -d "$PROJECT_DIR" ] && [ -f "$PROJECT_DIR/package.json" ]; then
              echo "📦 备份当前版本到 $BACKUP_DIR"
              cp -r "$PROJECT_DIR" "$BACKUP_DIR"
              echo "✅ 备份完成"
            else
              echo "ℹ️  未发现现有版本，跳过备份"
            fi

            # 2. 停止当前应用
            echo "⏹️  停止当前应用..."
            pm2 stop easy-erp-web || true
            pm2 delete easy-erp-web || true

            # 3. 创建和进入项目目录
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR" || exit 1

            # 4. 拉取最新代码
            echo "📥 拉取最新代码..."
            if [ ! -d ".git" ]; then
              echo "🔗 初始化Git仓库..."
              git clone https://github.com/rn1024/easy-erp-web.git .
            else
              echo "🔄 更新现有仓库..."
              git fetch origin
              git reset --hard origin/main
              
              # 处理.user.ini文件权限问题
              if [ -f ".user.ini" ]; then
                echo "🔧 处理.user.ini文件权限..."
                chattr -i .user.ini 2>/dev/null || true
                echo "✅ .user.ini权限已处理"
              fi
              
              git clean -fd
            fi

            echo "✅ 当前代码版本: $(git log --oneline -1)"

            # 5. 设置npm淘宝源
            echo "🔧 配置npm淘宝源..."
            npm config set registry https://registry.npmmirror.com
            npm config set disturl https://npmmirror.com/dist
            npm config set electron_mirror https://npmmirror.com/mirrors/electron/
            npm config set sass_binary_site https://npmmirror.com/mirrors/node-sass/
            npm config set phantomjs_cdnurl https://npmmirror.com/mirrors/phantomjs/
            npm config set chromedriver_cdnurl https://npmmirror.com/mirrors/chromedriver/
            npm config set operadriver_cdnurl https://npmmirror.com/mirrors/operadriver/
            npm config set fse_binary_host_mirror https://npmmirror.com/mirrors/fsevents/
            echo "✅ npm源配置完成"

            # 6. 清理旧文件
            echo "🗑️  清理旧的依赖和构建产物..."
            rm -rf node_modules
            rm -rf .next
            rm -f package-lock.json
            npm cache clean --force
            echo "✅ 清理完成"

            # 7. 设置环境变量
            echo "⚙️  配置生产环境变量..."
            cat > .env << 'EOF'
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}
            OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}
            OSS_BUCKET=${{ secrets.OSS_BUCKET }}
            OSS_REGION=${{ secrets.OSS_REGION }}
            OSS_ENDPOINT=easy-erp-web.oss-cn-hangzhou.aliyuncs.com
            NEXT_PUBLIC_APP_URL=https://erp.samuelcn.com
            OSS_PATH_PREFIX=template
            NODE_ENV=production
            PORT=3008
            EOF
            echo "✅ 环境变量配置完成"

            # 8. 安装依赖
            echo "📦 开始安装项目依赖..."
            npm install --production=false

            # 验证关键依赖
            if [ ! -f "node_modules/.bin/next" ]; then
              echo "❌ Next.js 未正确安装"
              exit 1
            fi
            echo "✅ 依赖安装完成"

            # 9. 生成Prisma客户端
            echo "🗄️  生成Prisma客户端..."
            npm run db:generate
            echo "✅ Prisma客户端生成完成"

            # 10. 数据库迁移
            echo "🗄️  执行数据库迁移..."
            npm run db:sync-migrate
            echo "✅ 数据库迁移完成"

            # 11. 构建应用
            echo "🔨 开始构建应用..."
            npm run build

            # 12. 验证构建产物
            echo "✅ 验证构建产物..."
            if [ ! -d ".next" ]; then
              echo "❌ .next目录不存在，构建失败"
              exit 1
            fi

            if [ ! -f ".next/BUILD_ID" ]; then
              echo "❌ BUILD_ID文件不存在，构建失败"
              exit 1
            fi

            if [ ! -d ".next/server" ]; then
              echo "❌ server目录不存在，构建失败"
              exit 1
            fi

            if [ ! -d ".next/static" ]; then
              echo "❌ static目录不存在，构建失败"
              exit 1
            fi

            BUILD_SIZE=$(du -sh .next | cut -f1)
            echo "✅ 构建产物大小: $BUILD_SIZE"
            echo "✅ 构建完成，验证通过"

            # 13. 检查端口并释放
            echo "🔍 检查端口3008状态..."
            if netstat -tlnp | grep :3008; then
              echo "⚠️  端口3008被占用，正在释放..."
              lsof -ti:3008 | xargs kill -9 2>/dev/null || true
              sleep 3
              echo "✅ 端口已释放"
            else
              echo "✅ 端口3008空闲"
            fi

            # 14. 配置Nginx（如果配置文件存在）
            if [ -f "nginx/erp.samuelcn.com.conf" ]; then
              echo "🌐 配置Nginx..."
              mkdir -p /etc/nginx/sites-available
              mkdir -p /etc/nginx/sites-enabled
              cp nginx/erp.samuelcn.com.conf /etc/nginx/sites-available/
              ln -sf /etc/nginx/sites-available/erp.samuelcn.com.conf /etc/nginx/sites-enabled/
              
              # 测试nginx配置
              if nginx -t; then
                nginx -s reload
                echo "✅ Nginx配置更新成功"
              else
                echo "⚠️  Nginx配置测试失败，跳过重载"
              fi
            else
              echo "ℹ️  未找到Nginx配置文件，跳过配置"
            fi

            # 15. 启动应用
            echo "🚀 启动应用..."
            pm2 start ecosystem.config.js --env production
            pm2 save
            echo "✅ PM2启动命令执行完成"

            # 16. 等待应用完全启动
            echo "⏳ 等待应用完全启动（15秒）..."
            sleep 15

            # 17. 验证应用状态
            echo "🔍 验证应用状态..."
            pm2 status

            if pm2 status | grep easy-erp-web | grep -q online; then
              echo "✅ 应用启动成功"
            else
              echo "❌ 应用启动失败，查看日志："
              pm2 logs easy-erp-web --lines 20
              exit 1
            fi

            # 18. 本地健康检查
            echo "🏥 执行本地健康检查..."
            for i in {1..6}; do
              echo "🔍 健康检查尝试 $i/6..."
              if curl -f -s --max-time 10 "http://localhost:3008/api/health" > /dev/null; then
                echo "✅ 本地健康检查通过"
                break
              else
                if [ $i -eq 6 ]; then
                  echo "❌ 本地健康检查失败"
                  echo "📝 应用日志："
                  pm2 logs easy-erp-web --lines 30
                  exit 1
                else
                  echo "⏳ 健康检查失败，等待5秒后重试..."
                  sleep 5
                fi
              fi
            done

            # 19. 检查关键接口
            echo "🧪 检查关键接口..."
            if curl -f -s --max-time 10 "http://localhost:3008/api/v1/auth/verifycode" > /dev/null; then
              echo "✅ 验证码接口正常"
            else
              echo "⚠️  验证码接口异常，但继续部署"
            fi

            echo ""
            echo "🎉 ECS本地构建部署完成！"
            echo "==============================================="
            echo "📊 部署结果："
            echo "  📅 部署时间: $(date)"
            echo "  🏗️  构建大小: $BUILD_SIZE"
            echo "  🌐 应用地址: https://erp.samuelcn.com"
            echo "  📝 Git版本: $(git log --oneline -1)"
            echo "==============================================="

            # 20. 清理旧备份（保留最近3个）
            echo "🧹 清理旧备份文件..."
            cd /www/wwwroot/
            ls -t easy-erp-web-backup-* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true
            echo "✅ 备份清理完成"

  # 3. 远程验证Job
  verify:
    name: Remote Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Wait for service stabilization
        run: |
          echo "⏳ 等待服务稳定（30秒）..."
          sleep 30

      - name: Remote health check
        run: |
          echo "🔍 远程健康检查..."

          MAX_RETRIES=10
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "🔍 健康检查尝试 $(($RETRY_COUNT + 1))/$MAX_RETRIES..."
            
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 15 \
              --connect-timeout 5 \
              "https://erp.samuelcn.com/api/health" 2>/dev/null || echo "000")
            
            echo "📡 健康检查响应码: $response"
            
            if [ "$response" = "200" ]; then
              echo "✅ 远程健康检查成功！"
              SUCCESS=true
              break
            else
              echo "⚠️  健康检查失败 (HTTP $response)，等待10秒后重试..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "❌ 远程健康检查最终失败"
            exit 1
          fi

      - name: Functional verification
        run: |
          echo "🧪 功能接口验证..."

          # 测试关键接口
          endpoints=(
            "https://erp.samuelcn.com/api/health"
            "https://erp.samuelcn.com/api/v1/auth/verifycode"
          )

          for endpoint in "${endpoints[@]}"; do
            echo "📡 测试 $endpoint"
            status=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 10 \
              --connect-timeout 5 \
              "$endpoint" 2>/dev/null || echo "000")
              
            if [ "$status" = "200" ]; then
              echo "✅ $endpoint 正常 (HTTP $status)"
            else
              echo "⚠️  $endpoint 异常 (HTTP $status)"
            fi
          done

      - name: Performance check
        run: |
          echo "⚡ 性能检查..."

          start_time=$(date +%s%N)
          curl -s --max-time 10 "https://erp.samuelcn.com/api/health" > /dev/null
          end_time=$(date +%s%N)

          duration=$((($end_time - $start_time) / 1000000))
          echo "📊 响应时间: ${duration}ms"

          if [ $duration -lt 3000 ]; then
            echo "✅ 响应时间正常"
          else
            echo "⚠️  响应时间较慢"
          fi

      - name: Final deployment status
        run: |
          echo ""
          echo "🎉 部署验证完成！"
          echo "==============================================="
          echo "✅ ECS本地构建部署成功"
          echo "✅ 远程健康检查通过"
          echo "✅ 关键接口验证完成"
          echo "🌐 应用地址: https://erp.samuelcn.com"
          echo "📊 验证时间: $(date)"
          echo "==============================================="

      - name: Troubleshoot on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🔍 故障排查..."

            echo "📊 PM2状态："
            pm2 status

            echo "📝 应用日志（最近50行）："
            pm2 logs easy-erp-web --lines 50 2>/dev/null || echo "无法获取PM2日志"

            echo "🌐 端口监听状态："
            netstat -tlnp | grep :3008 || echo "端口3008未监听"

            echo "🔄 尝试重启应用："
            pm2 restart easy-erp-web
            sleep 10
            pm2 status
