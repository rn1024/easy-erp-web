name: Deploy to ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # 允许手动触发

jobs:
  # 1. 构建和测试 Job
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # 不使用缓存，避免锁文件冲突

      - name: Install dependencies
        run: npm install

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}" >> .env
          echo "OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}" >> .env
          echo "OSS_BUCKET=easy-erp-web" >> .env
          echo "OSS_REGION=oss-cn-hangzhou" >> .env
          echo "OSS_ENDPOINT=easy-erp-web.oss-cn-hangzhou.aliyuncs.com" >> .env
          echo "OSS_PATH_PREFIX=template" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3008" >> .env

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next
            package.json
            package-lock.json
            ecosystem.config.js
            prisma
            generated
            next.config.js
            tsconfig.json
            public
          retention-days: 1

  # 2. 打包 Job
  package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Debug - Check downloaded files
        run: |
          echo "Current working directory:"
          pwd
          echo "List all files and directories:"
          ls -la
          echo "Check if .next directory exists:"
          ls -la .next || echo ".next directory not found"
          echo "Check if package.json exists:"
          ls -la package.json || echo "package.json not found"

      - name: Generate production environment file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.production
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env.production
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
          echo "OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}" >> .env.production
          echo "OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}" >> .env.production
          echo "OSS_BUCKET=easy-erp-web" >> .env.production
          echo "OSS_REGION=oss-cn-hangzhou" >> .env.production
          echo "OSS_ENDPOINT=easy-erp-web.oss-cn-hangzhou.aliyuncs.com" >> .env.production
          echo "OSS_PATH_PREFIX=template" >> .env.production
          echo "NODE_ENV=production" >> .env.production
          echo "PORT=3008" >> .env.production

      - name: Create deployment package
        run: |
          # 检查必要文件是否存在，并创建部署包
          echo "Creating deployment package..."

          # 创建一个临时目录来组织文件
          mkdir -p deploy-temp

          # 复制存在的文件到临时目录
          if [ -d ".next" ]; then
            cp -r .next deploy-temp/
          else
            echo "Warning: .next directory not found"
          fi

          if [ -f "package.json" ]; then
            cp package.json deploy-temp/
          else
            echo "Warning: package.json not found"
          fi

          if [ -f "package-lock.json" ]; then
            cp package-lock.json deploy-temp/
          else
            echo "Warning: package-lock.json not found"
          fi

          if [ -f "ecosystem.config.js" ]; then
            cp ecosystem.config.js deploy-temp/
          else
            echo "Warning: ecosystem.config.js not found"
          fi

          if [ -d "prisma" ]; then
            cp -r prisma deploy-temp/
          else
            echo "Warning: prisma directory not found"
          fi

          if [ -d "generated" ]; then
            cp -r generated deploy-temp/
          else
            echo "Warning: generated directory not found"
          fi

          if [ -f "next.config.js" ]; then
            cp next.config.js deploy-temp/
          else
            echo "Warning: next.config.js not found"
          fi

          if [ -f "tsconfig.json" ]; then
            cp tsconfig.json deploy-temp/
          else
            echo "Warning: tsconfig.json not found"
          fi

          if [ -d "public" ]; then
            cp -r public deploy-temp/
          else
            echo "Warning: public directory not found"
          fi

          # 复制环境变量文件
          cp .env.production deploy-temp/

          # 列出临时目录内容
          echo "Contents of deploy-temp:"
          ls -la deploy-temp/

          # 从临时目录创建tar包
          cd deploy-temp
          tar -czf ../deploy.tar.gz .
          cd ..

          # 验证tar包
          echo "Verifying tar package:"
          tar -tzf deploy.tar.gz | head -20

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy.tar.gz
          retention-days: 1

  # 3. 部署 Job
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: package
    # 只在主分支推送时部署
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Upload to ECS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          source: deploy.tar.gz
          target: /tmp/
          overwrite: true

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # 创建项目目录
            mkdir -p /www/wwwroot/easy-erp-web

            # 停止并删除旧的PM2进程（确保端口更改生效）
            pm2 stop easy-erp-web || true
            pm2 delete easy-erp-web || true

            # 备份当前版本（如果存在）
            if [ -d "/www/wwwroot/easy-erp-web/backup" ]; then
              rm -rf /www/wwwroot/easy-erp-web/backup
            fi
            if [ -f "/www/wwwroot/easy-erp-web/package.json" ]; then
              mkdir -p /www/wwwroot/easy-erp-web/backup
              cp -r /www/wwwroot/easy-erp-web/* /www/wwwroot/easy-erp-web/backup/ 2>/dev/null || true
            fi

            # 解压新版本
            cd /www/wwwroot/easy-erp-web
            tar -xzf /tmp/deploy.tar.gz
            rm -f /tmp/deploy.tar.gz

            # 设置环境变量文件
            cp .env.production .env

            # 安装生产依赖（服务器使用npm）
            npm install --production --omit=dev

            # 数据库迁移
            npx prisma generate
            npx prisma db push

            # 检查端口是否被占用，如果被占用则释放
            PORT_IN_USE=$(netstat -tlnp 2>/dev/null | grep ":3008 " | wc -l)
            if [ "$PORT_IN_USE" -gt 0 ]; then
              echo "端口 3008 被占用，正在释放..."
              lsof -ti:3008 | xargs kill -9 2>/dev/null || true
              sleep 3
            fi

            # 启动应用（使用新配置）
            pm2 start ecosystem.config.js --env production

            # 保存 PM2 配置
            pm2 save

            # 重载 nginx（如果需要）
            nginx -t && nginx -s reload || true

            # 显示应用状态
            pm2 status

  # 4. 部署后验证 Job
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Health check
        run: |
          echo "Waiting for application to start..."
          sleep 30

          # 检查应用健康状态
          response=$(curl -s -o /dev/null -w "%{http_code}" "http://${{ secrets.HOST }}:3008/api/health" || echo "000")

          if [ "$response" = "200" ]; then
            echo "✅ Application is healthy"
          else
            echo "❌ Application health check failed (HTTP $response)"
            exit 1
          fi

      - name: Notify deployment status
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🚀 部署完成！"
            echo "📊 应用状态："
            pm2 status
            echo "💾 磁盘使用情况："
            df -h /www/wwwroot/easy-erp-web
            echo "🔄 最近的应用日志："
            pm2 logs easy-erp-web --lines 10
