name: Deploy to ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # 允许手动触发
    inputs:
      action:
        description: '选择操作'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback

jobs:
  # 1. 构建和测试 Job
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'rollback'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # 不使用缓存，避免锁文件冲突

      - name: Remove pnpm lock file
        run: rm -f pnpm-lock.yaml

      - name: Install dependencies
        run: npm install

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}" >> .env
          echo "OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}" >> .env
          echo "OSS_BUCKET=${{ secrets.OSS_BUCKET }}" >> .env
          echo "OSS_REGION=${{ secrets.OSS_REGION }}" >> .env
          echo "OSS_ENDPOINT=easy-erp-web.oss-cn-hangzhou.aliyuncs.com" >> .env
          echo "NEXT_PUBLIC_APP_URL=https://erp.samuelcn.com" >> .env
          echo "OSS_PATH_PREFIX=template" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3008" >> .env

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la .next/
          ls -la .next/BUILD_ID
          echo "Build verification complete"

      - name: Compress .next directory
        run: |
          echo "Compressing .next directory..."
          tar -czf next-build.tar.gz .next/
          ls -la next-build.tar.gz
          echo "Compression complete"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            next-build.tar.gz
            package.json
            package-lock.json
            ecosystem.config.js
            prisma
            generated
            next.config.js
            tsconfig.json
            public
            scripts
          retention-days: 1

  # 2. 打包 Job
  package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.action != 'rollback'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Extract .next directory
        run: |
          echo "Extracting .next directory from compressed file..."
          if [ -f "next-build.tar.gz" ]; then
            tar -xzf next-build.tar.gz
            echo "✅ .next directory extracted successfully"
            ls -la .next/
            ls -la .next/BUILD_ID
          else
            echo "❌ next-build.tar.gz not found"
            exit 1
          fi

      - name: Debug - Check downloaded files
        run: |
          echo "Current working directory:"
          pwd
          echo "List all files and directories:"
          ls -la
          echo "Check if .next directory exists:"
          ls -la .next || echo ".next directory not found"
          echo "Check if package.json exists:"
          ls -la package.json || echo "package.json not found"

      - name: Generate production environment file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.production
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env.production
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
          echo "OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}" >> .env.production
          echo "OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}" >> .env.production
          echo "OSS_BUCKET=${{ secrets.OSS_BUCKET }}" >> .env.production
          echo "OSS_REGION=${{ secrets.OSS_REGION }}" >> .env.production
          echo "OSS_ENDPOINT=easy-erp-web.oss-cn-hangzhou.aliyuncs.com" >> .env.production
          echo "NEXT_PUBLIC_APP_URL=https://erp.samuelcn.com" >> .env.production
          echo "OSS_PATH_PREFIX=template" >> .env.production
          echo "NODE_ENV=production" >> .env.production
          echo "PORT=3008" >> .env.production

      - name: Create deployment package
        run: |
          # 检查必要文件是否存在，并创建部署包
          echo "Creating deployment package..."

          # 创建一个临时目录来组织文件
          mkdir -p deploy-temp

          # 复制存在的文件到临时目录
          if [ -d ".next" ]; then
            cp -r .next deploy-temp/
          else
            echo "Warning: .next directory not found"
          fi

          if [ -f "package.json" ]; then
            cp package.json deploy-temp/
          else
            echo "Warning: package.json not found"
          fi

          if [ -f "package-lock.json" ]; then
            cp package-lock.json deploy-temp/
            echo "✅ package-lock.json included"
          else
            echo "❌ ERROR: package-lock.json not found - this is required for consistent npm installs"
            exit 1
          fi

          if [ -f "ecosystem.config.js" ]; then
            cp ecosystem.config.js deploy-temp/
          else
            echo "Warning: ecosystem.config.js not found"
          fi

          if [ -d "prisma" ]; then
            cp -r prisma deploy-temp/
          else
            echo "Warning: prisma directory not found"
          fi

          if [ -d "generated" ]; then
            cp -r generated deploy-temp/
          else
            echo "Warning: generated directory not found"
          fi

          if [ -f "next.config.js" ]; then
            cp next.config.js deploy-temp/
          else
            echo "Warning: next.config.js not found"
          fi

          if [ -f "tsconfig.json" ]; then
            cp tsconfig.json deploy-temp/
          else
            echo "Warning: tsconfig.json not found"
          fi

          if [ -d "public" ]; then
            cp -r public deploy-temp/
          else
            echo "Warning: public directory not found"
          fi

          # 复制scripts目录
          if [ -d "scripts" ]; then
            cp -r scripts deploy-temp/
            echo "✅ scripts目录已包含"
          else
            echo "Warning: scripts directory not found"
          fi

          # 复制nginx配置文件
          if [ -d "nginx" ]; then
            cp -r nginx deploy-temp/
            echo "✅ Nginx配置文件已包含"
          else
            echo "Warning: nginx directory not found"
          fi

          # 复制环境变量文件
          cp .env.production deploy-temp/

          # 列出临时目录内容
          echo "Contents of deploy-temp:"
          ls -la deploy-temp/

          # 从临时目录创建tar包
          cd deploy-temp
          tar -czf ../deploy.tar.gz .
          cd ..

          # 验证tar包
          echo "Verifying tar package:"
          tar -tzf deploy.tar.gz | head -20

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy.tar.gz
          retention-days: 1

  # 3. 部署 Job
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: package
    # 只在主分支推送时部署或手动触发部署时
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Upload to ECS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          source: deploy.tar.gz
          target: /tmp/
          overwrite: true

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # 创建项目目录
            mkdir -p /www/wwwroot/easy-erp-web

            # 停止并删除旧的PM2进程（确保端口更改生效）
            pm2 stop easy-erp-web || true
            pm2 delete easy-erp-web || true

            # 创建备份目录
            mkdir -p /www/wwwroot/easy-erp-web-backups

            # 备份当前版本（如果存在）
            if [ -f "/www/wwwroot/easy-erp-web/package.json" ]; then
              BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
              echo "📦 创建备份: $BACKUP_NAME"

              # 创建备份
              cp -r /www/wwwroot/easy-erp-web /www/wwwroot/easy-erp-web-backups/$BACKUP_NAME
              echo "✅ 备份完成: /www/wwwroot/easy-erp-web-backups/$BACKUP_NAME"

              # 清理旧备份，只保留最新的2个
              cd /www/wwwroot/easy-erp-web-backups
              BACKUP_COUNT=$(ls -1 | grep "backup-" | wc -l)
              if [ $BACKUP_COUNT -gt 2 ]; then
                echo "🧹 清理旧备份，当前有 $BACKUP_COUNT 个备份"
                ls -1t | grep "backup-" | tail -n +3 | xargs rm -rf
                echo "✅ 备份清理完成，保留最新2个备份"
              fi

              # 显示当前备份列表
              echo "📋 当前备份列表:"
              ls -la /www/wwwroot/easy-erp-web-backups/ | grep "backup-"
            else
              echo "ℹ️  未发现现有版本，跳过备份"
            fi

            # 清空项目目录，准备部署新版本
            rm -rf /www/wwwroot/easy-erp-web/*
            echo "✅ 项目目录已清空"

            # 解压新版本
            cd /www/wwwroot/easy-erp-web
            tar -xzf /tmp/deploy.tar.gz
            rm -f /tmp/deploy.tar.gz

            # 验证解压结果
            echo "验证解压结果..."
            ls -la
            if [ -d ".next" ]; then
              echo "✅ .next目录存在"
              ls -la .next/
              if [ -f ".next/BUILD_ID" ]; then
                echo "✅ BUILD_ID文件存在"
              else
                echo "❌ BUILD_ID文件缺失"
              fi
            else
              echo "❌ .next目录不存在"
            fi

            # 设置环境变量文件
            cp .env.production .env

            # 配置nginx
            if [ -f "nginx/erp.samuelcn.com.conf" ]; then
              echo "配置nginx..."
              mkdir -p /etc/nginx/sites-available
              mkdir -p /etc/nginx/sites-enabled
              cp nginx/erp.samuelcn.com.conf /etc/nginx/sites-available/
              ln -sf /etc/nginx/sites-available/erp.samuelcn.com.conf /etc/nginx/sites-enabled/

              # 测试nginx配置
              nginx -t && echo "✅ Nginx配置正确" || echo "❌ Nginx配置错误"
            fi

            # 安装生产依赖（服务器使用npm）
            npm install --production --omit=dev

            # 验证关键依赖是否安装成功
            if [ ! -f "node_modules/.bin/next" ]; then
              echo "⚠️  Next.js 未正确安装，尝试完整安装..."
              npm install
            fi

            # 检查.next目录是否完整，如果不完整则重新构建
            if [ ! -f ".next/BUILD_ID" ] || [ ! -d ".next/server" ]; then
              echo "⚠️  .next目录不完整，开始重新构建..."
              npm install
              npm run build
              echo "✅ 重新构建完成"
            else
              echo "✅ .next目录完整，跳过构建"
            fi

                        # 检查MySQL和Redis连接
            echo "🔍 检查数据库和Redis连接..."
            if [ -f "scripts/check-connections.js" ]; then
              node scripts/check-connections.js
              if [ $? -eq 0 ]; then
                echo "✅ 所有服务连接正常"
              else
                echo "❌ 部分服务连接失败，但继续部署..."
                echo "⚠️  请检查以下服务状态："
                echo "  📦 Docker容器状态："
                docker ps | grep -E "(mysql|redis)" || echo "    - 未找到MySQL/Redis容器"
                echo "  🌐 端口监听状态："
                netstat -tlnp | grep :3306 || echo "    - MySQL端口3306未监听"
                netstat -tlnp | grep :6379 || echo "    - Redis端口6379未监听"
              fi
            else
              echo "⚠️  连接检查脚本不存在，跳过连接测试"
            fi

            # 数据库迁移
            echo "🗄️  开始数据库迁移..."
            npx prisma generate
            npx prisma db push

            # 检查端口是否被占用，如果被占用则释放
            PORT_IN_USE=$(netstat -tlnp 2>/dev/null | grep ":3008 " | wc -l)
            if [ "$PORT_IN_USE" -gt 0 ]; then
              echo "端口 3008 被占用，正在释放..."
              lsof -ti:3008 | xargs kill -9 2>/dev/null || true
              sleep 3
            fi

            # 启动应用（使用新配置）
            pm2 start ecosystem.config.js --env production

            # 保存 PM2 配置
            pm2 save

            # 重载 nginx
            if command -v nginx >/dev/null 2>&1; then
              nginx -t && nginx -s reload && echo "✅ Nginx重载成功" || echo "❌ Nginx重载失败"
            fi

            # 显示应用状态
            pm2 status

  # 4. 部署后验证 Job
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    timeout-minutes: 10 # 设置job超时时间

    steps:
      - name: Health check
        run: |
          echo "🚀 开始应用健康检查..."

          # 等待应用启动
          echo "⏳ 等待应用启动（60秒）..."
          sleep 60

          # 健康检查重试机制
          MAX_RETRIES=5
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "🔍 尝试健康检查 $(($RETRY_COUNT + 1))/$MAX_RETRIES..."

            # 检查应用健康状态（使用HTTPS）
            response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 --connect-timeout 5 "https://erp.samuelcn.com/api/health" 2>/dev/null || echo "000")

            echo "📡 健康检查响应码: $response"

            if [ "$response" = "200" ]; then
              echo "✅ 应用健康检查成功！"
              SUCCESS=true
              break
            else
              echo "⚠️  健康检查失败 (HTTP $response)，等待10秒后重试..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "❌ 应用健康检查最终失败，开始故障排查..."
            exit 1
          fi

      - name: Troubleshoot on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🔍 开始故障排查..."

            echo "📊 PM2状态："
            pm2 status

            echo "📝 应用日志（最近50行）："
            pm2 logs easy-erp-web --lines 50 || echo "无法获取PM2日志"

            echo "🌐 端口监听状态："
            netstat -tlnp | grep :3008 || echo "端口3008未监听"

            echo "🔥 系统进程："
            ps aux | grep easy-erp-web || echo "未找到应用进程"

            echo "💾 磁盘空间："
            df -h /www/wwwroot/easy-erp-web

                        echo "🔍 检查服务依赖："
            echo "📊 Docker容器状态："
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(mysql|redis)" || echo "未找到MySQL/Redis容器"

            echo "📊 MySQL容器详情："
            docker ps | grep mysql || echo "MySQL容器未运行"

            echo "📊 Redis容器详情："
            docker ps | grep redis || echo "Redis容器未运行"

            echo "🌐 网络端口检查："
            echo "MySQL端口 3306:" && netstat -tlnp | grep :3306 || echo "MySQL端口未监听"
            echo "Redis端口 6379:" && netstat -tlnp | grep :6379 || echo "Redis端口未监听"

            echo "🔄 尝试重启应用："
            pm2 restart easy-erp-web || echo "重启失败"

            echo "⏳ 等待重启后再次检查（30秒）："
            sleep 30
            pm2 status

            # 检查是否有备份可以回滚
            if [ -d "/www/wwwroot/easy-erp-web-backups" ]; then
              LATEST_BACKUP=$(ls -1t /www/wwwroot/easy-erp-web-backups/ | grep "backup-" | head -1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "🔄 发现最新备份: $LATEST_BACKUP"
                echo "⚠️  如需回滚，请手动执行以下命令："
                echo "   cd /www/wwwroot"
                echo "   rm -rf easy-erp-web"
                echo "   cp -r easy-erp-web-backups/$LATEST_BACKUP easy-erp-web"
                echo "   cd easy-erp-web"
                echo "   pm2 restart easy-erp-web"
              fi
            fi

      - name: Notify deployment status
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🎉 部署成功完成！"
            echo "📊 应用状态："
            pm2 status
            echo "💾 磁盘使用情况："
            df -h /www/wwwroot/easy-erp-web
            echo "🔄 最近的应用日志："
            pm2 logs easy-erp-web --lines 10

  # 5. 回滚 Job
  rollback:
    name: Rollback to Previous Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'

    steps:
      - name: Rollback to latest backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🔄 开始回滚操作..."

            # 检查备份目录
            if [ ! -d "/www/wwwroot/easy-erp-web-backups" ]; then
              echo "❌ 备份目录不存在，无法回滚"
              exit 1
            fi

            # 查找最新备份
            LATEST_BACKUP=$(ls -1t /www/wwwroot/easy-erp-web-backups/ | grep "backup-" | head -1)
            if [ -z "$LATEST_BACKUP" ]; then
              echo "❌ 未找到可用备份，无法回滚"
              exit 1
            fi

            echo "📦 找到最新备份: $LATEST_BACKUP"

            # 停止当前应用
            pm2 stop easy-erp-web || true
            pm2 delete easy-erp-web || true

            # 备份当前失败的版本（以防需要）
            if [ -f "/www/wwwroot/easy-erp-web/package.json" ]; then
              FAILED_BACKUP="failed-$(date +%Y%m%d-%H%M%S)"
              echo "📦 备份当前失败版本: $FAILED_BACKUP"
              cp -r /www/wwwroot/easy-erp-web /www/wwwroot/easy-erp-web-backups/$FAILED_BACKUP
            fi

            # 清空当前目录
            rm -rf /www/wwwroot/easy-erp-web/*

            # 恢复备份
            echo "🔄 恢复备份: $LATEST_BACKUP"
            cp -r /www/wwwroot/easy-erp-web-backups/$LATEST_BACKUP/* /www/wwwroot/easy-erp-web/

            # 重新启动应用
            cd /www/wwwroot/easy-erp-web
            pm2 start ecosystem.config.js --env production

            # 等待启动
            sleep 20

            # 检查应用状态
            pm2 status

            echo "✅ 回滚完成"

      - name: Verify rollback
        run: |
          echo "🔍 验证回滚后的应用状态..."

          # 等待应用启动
          sleep 30

          # 健康检查
          response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 --connect-timeout 5 "https://erp.samuelcn.com/api/health" 2>/dev/null || echo "000")

          echo "📡 健康检查响应码: $response"

          if [ "$response" = "200" ]; then
            echo "✅ 回滚成功，应用正常运行！"
          else
            echo "⚠️  回滚后应用可能仍有问题，响应码: $response"
            exit 1
          fi
