name: Deploy to ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # 允许手动触发

jobs:
  # 1. 代码验证Job（轻量级）
  validate:
    name: Code Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Remove pnpm lock file
        run: rm -f pnpm-lock.yaml

      - name: Install dependencies (validation only)
        run: npm install

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint || echo "Lint检查完成（允许警告）"

  # 2. 触发ECS本地构建和部署Job
  deploy:
    name: ECS Local Build and Deploy
    runs-on: ubuntu-latest
    needs: validate
    # 只在主分支推送时部署或手动触发时
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to ECS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # 设置环境变量
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export REDIS_URL="${{ secrets.REDIS_URL }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export OSS_ACCESS_KEY_ID="${{ secrets.OSS_ACCESS_KEY_ID }}"
            export OSS_ACCESS_KEY_SECRET="${{ secrets.OSS_ACCESS_KEY_SECRET }}"
            export OSS_BUCKET="${{ secrets.OSS_BUCKET }}"
            export OSS_REGION="${{ secrets.OSS_REGION }}"
            
            # 进入项目目录
            PROJECT_DIR="/www/wwwroot/easy-erp-web"
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR" || exit 1
            
            # 确保脚本存在并可执行
            if [ ! -f "scripts/deploy-to-ecs.sh" ]; then
              echo "❌ 部署脚本不存在: scripts/deploy-to-ecs.sh"
              exit 1
            fi
            
            chmod +x scripts/deploy-to-ecs.sh
            
            # 执行部署脚本
            ./scripts/deploy-to-ecs.sh
  # 3. 远程验证Job
  verify:
    name: Remote Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Wait for service stabilization
        run: |
          echo "⏳ 等待服务稳定（30秒）..."
          sleep 30

      - name: Remote health check
        run: |
          echo "🔍 远程健康检查..."

          MAX_RETRIES=10
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "🔍 健康检查尝试 $(($RETRY_COUNT + 1))/$MAX_RETRIES..."

            response=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 15 \
              --connect-timeout 5 \
              "https://erp.samuelcn.com/api/health" 2>/dev/null || echo "000")

            echo "📡 健康检查响应码: $response"

            if [ "$response" = "200" ]; then
              echo "✅ 远程健康检查成功！"
              SUCCESS=true
              break
            else
              echo "⚠️  健康检查失败 (HTTP $response)，等待10秒后重试..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "❌ 远程健康检查最终失败"
            exit 1
          fi

      - name: Functional verification
        run: |
          echo "🧪 功能接口验证..."

          # 测试关键接口
          endpoints=(
            "https://erp.samuelcn.com/api/health"
            "https://erp.samuelcn.com/api/v1/auth/verifycode"
          )

          for endpoint in "${endpoints[@]}"; do
            echo "📡 测试 $endpoint"
            status=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 10 \
              --connect-timeout 5 \
              "$endpoint" 2>/dev/null || echo "000")

            if [ "$status" = "200" ]; then
              echo "✅ $endpoint 正常 (HTTP $status)"
            else
              echo "⚠️  $endpoint 异常 (HTTP $status)"
            fi
          done

      - name: Performance check
        run: |
          echo "⚡ 性能检查..."

          start_time=$(date +%s%N)
          curl -s --max-time 10 "https://erp.samuelcn.com/api/health" > /dev/null
          end_time=$(date +%s%N)

          duration=$((($end_time - $start_time) / 1000000))
          echo "📊 响应时间: ${duration}ms"

          if [ $duration -lt 3000 ]; then
            echo "✅ 响应时间正常"
          else
            echo "⚠️  响应时间较慢"
          fi

      - name: Final deployment status
        run: |
          echo ""
          echo "🎉 部署验证完成！"
          echo "==============================================="
          echo "✅ ECS本地构建部署成功"
          echo "✅ 远程健康检查通过"
          echo "✅ 关键接口验证完成"
          echo "🌐 应用地址: https://erp.samuelcn.com"
          echo "📊 验证时间: $(date)"
          echo "==============================================="

      - name: Troubleshoot on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🔍 故障排查..."

            echo "📊 PM2状态："
            pm2 status

            echo "📝 应用日志（最近50行）："
            pm2 logs easy-erp-web --lines 50 2>/dev/null || echo "无法获取PM2日志"

            echo "🌐 端口监听状态："
            netstat -tlnp | grep :3008 || echo "端口3008未监听"

            echo "🐳 Docker容器状态："
            docker ps -a | grep mysql || echo "MySQL容器未运行"

            echo "🔄 尝试重启应用："
            pm2 restart easy-erp-web
            sleep 10
            pm2 status

            echo "📊 部署故障排查完成"
