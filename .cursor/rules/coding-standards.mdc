---
description:
globs:
alwaysApply: true
---
# 编码规范

## TypeScript 编码规范

### 命名约定

1. **文件命名**
   - 页面文件: `kebab-case` (如: `user-management.tsx`)
   - 组件文件: `PascalCase` 或 `kebab-case` (如: `UserCard.tsx` 或 `user-card.tsx`)
   - 工具文件: `camelCase` (如: `authUtils.ts`)
   - 常量文件: `SCREAMING_SNAKE_CASE` (如: `API_ENDPOINTS.ts`)

2. **变量和函数命名**
   - 变量: `camelCase` (如: `userName`, `isLoggedIn`)
   - 函数: `camelCase` (如: `getUserInfo`, `handleSubmit`)
   - 常量: `SCREAMING_SNAKE_CASE` (如: `MAX_FILE_SIZE`)
   - 枚举: `PascalCase` (如: `UserStatus`)

3. **组件命名**
   - React组件: `PascalCase` (如: `UserProfile`, `DataTable`)
   - Hook: `use` 前缀 + `camelCase` (如: `useAuth`, `useUserData`)

### 代码组织

1. **导入顺序**
   ```typescript
   // 1. React 相关
   import React from 'react';
   import { useState, useEffect } from 'react';

   // 2. 第三方库
   import { Button, Table } from 'antd';
   import { useRequest } from 'ahooks';

   // 3. 内部模块 (按层级排序)
   import { AuthService } from '@/services/auth';
   import { UserCard } from '@/components/UserCard';
   import { formatDate } from '@/utils';

   // 4. 类型导入 (使用 type 关键字)
   import type { User, ApiResponse } from '@/types';
   ```

2. **组件结构**
   ```typescript
   // 参考 [admin-layout.tsx](mdc:src/components/admin-layout.tsx)
   interface ComponentProps {
     // props 类型定义
   }

   const ComponentName: React.FC<ComponentProps> = (props) => {
     // 1. Hooks
     // 2. 状态变量
     // 3. 计算属性
     // 4. 事件处理函数
     // 5. 副作用
     // 6. 渲染逻辑
   };

   export default ComponentName;
   ```

### API 服务规范

1. **服务文件结构** (参考 [auth.ts](mdc:src/services/auth.ts))
   ```typescript
   // 1. 导入依赖
   import axios from './index';
   import type { ApiResponse } from '@/types';

   // 2. API 函数定义
   export const loginApi = (data: LoginData) => {
     return axios<ApiResponse<UserInfo>>('/auth/login', {
       method: 'post',
       data,
     });
   };

   // 3. 类型定义
   export interface LoginData {
     username: string;
     password: string;
   }
   ```

2. **错误处理**
   - 使用统一的错误处理机制 (参考 [index.ts](mdc:src/services/index.ts))
   - 错误信息国际化处理

### 组件开发规范

1. **函数组件优先**
   - 统一使用函数组件和 Hooks
   - 避免使用类组件

2. **Props 接口定义**
   ```typescript
   interface ComponentProps {
     required: string;        // 必需属性
     optional?: number;       // 可选属性
     children?: React.ReactNode; // 子组件
     onAction?: (data: any) => void; // 事件处理
   }
   ```

3. **状态管理**
   - 简单状态: 使用 `useState`
   - 复杂状态: 使用 [Zustand](mdc:src/store) 全局状态
   - 服务端状态: 使用 `useRequest` (ahooks)

### 样式规范

1. **样式组织**
   - 全局样式: [globals.css](mdc:src/globals.css)
   - 组件样式: CSS Modules (如: [styles.module.css](mdc:src/app/login/styles.module.css))
   - 主题配置: Ant Design 主题定制

2. **响应式设计**
   - 移动端优先的响应式设计
   - 使用 Ant Design 栅格系统

### 数据库操作规范

1. **Prisma Schema** (参考 [schema.prisma](mdc:prisma/schema.prisma))
   - 遵循数据库命名约定
   - 合理使用关系和索引
   - 数据迁移版本控制

2. **数据库查询**
   - 使用 [db.ts](mdc:src/lib/db.ts) 统一数据库连接
   - 避免 N+1 查询问题
   - 合理使用事务处理

## 代码质量

### 代码检查
- **ESLint**: 使用 [eslint.config.mjs](mdc:eslint.config.mjs) 配置
- **Prettier**: 使用 [.prettierrc](mdc:.prettierrc) 格式化
- **TypeScript**: 严格类型检查

### 性能优化
1. **组件优化**
   - 使用 `React.memo` 避免不必要的重渲染
   - 合理使用 `useMemo` 和 `useCallback`

2. **代码分割**
   - 路由级别的代码分割
   - 组件懒加载

3. **资源优化**
   - 图片压缩和格式优化
   - 使用 CDN 加速静态资源
