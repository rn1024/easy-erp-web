# Easy ERP Web - API 开发规范

## API 设计原则

### 1. RESTful API 设计

遵循 REST API 设计原则，使用标准的 HTTP 方法和状态码：

```
GET    /api/v1/accounts         # 获取账户列表
POST   /api/v1/accounts         # 创建账户
GET    /api/v1/accounts/:id     # 获取单个账户
PUT    /api/v1/accounts/:id     # 更新账户
DELETE /api/v1/accounts/:id     # 删除账户
```

### 2. 统一响应格式

所有 API 响应统一使用以下格式：

```typescript
// 成功响应
{
  "code": 0,
  "msg": "操作成功",
  "data": {
    // 实际数据
  }
}

// 错误响应
{
  "code": 1,
  "msg": "错误描述",
  "data": null
}

// 列表响应
{
  "code": 0,
  "msg": "获取成功",
  "data": {
    "list": [...],
    "page": 1,
    "pageSize": 10,
    "total": 100
  }
}
```

### 3. 版本控制

API 使用 URL 版本控制，当前版本为 v1：

```
/api/v1/accounts
/api/v1/roles
/api/v1/products
```

## API 路由开发规范

### 1. 基础路由结构

```typescript
// src/app/api/v1/accounts/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { prisma } from '@/lib/db';
import { getCurrentUser, hasPermission } from '@/lib/auth';

// 请求验证 Schema
const CreateAccountSchema = z.object({
  name: z.string().min(1, '用户名不能为空').max(50, '用户名过长'),
  password: z.string().min(6, '密码至少6个字符'),
  operator: z.string().min(1, '操作员不能为空'),
  roleIds: z.array(z.string()).optional(),
});

const UpdateAccountSchema = CreateAccountSchema.partial().omit(['password']);

const QueryAccountSchema = z.object({
  page: z.coerce.number().min(1).default(1),
  pageSize: z.coerce.number().min(1).max(100).default(10),
  name: z.string().optional(),
  status: z.enum(['ACTIVE', 'INACTIVE']).optional(),
});

// GET - 获取账户列表
export async function GET(request: NextRequest) {
  try {
    // 1. 身份验证
    const user = await getCurrentUser(request);
    if (!user) {
      return NextResponse.json({ code: 1, msg: '未授权访问', data: null }, { status: 401 });
    }

    // 2. 权限验证
    if (!hasPermission(user, 'account:read')) {
      return NextResponse.json({ code: 1, msg: '权限不足', data: null }, { status: 403 });
    }

    // 3. 参数验证
    const { searchParams } = new URL(request.url);
    const query = QueryAccountSchema.parse({
      page: searchParams.get('page'),
      pageSize: searchParams.get('pageSize'),
      name: searchParams.get('name'),
      status: searchParams.get('status'),
    });

    // 4. 构建查询条件
    const where: any = {};
    if (query.name) {
      where.name = { contains: query.name };
    }
    if (query.status) {
      where.status = query.status;
    }

    // 5. 数据查询
    const [accounts, total] = await Promise.all([
      prisma.account.findMany({
        where,
        select: {
          id: true,
          name: true,
          operator: true,
          status: true,
          createdAt: true,
          updatedAt: true,
          roles: {
            select: {
              role: {
                select: {
                  id: true,
                  name: true,
                },
              },
            },
          },
        },
        skip: (query.page - 1) * query.pageSize,
        take: query.pageSize,
        orderBy: { createdAt: 'desc' },
      }),
      prisma.account.count({ where }),
    ]);

    // 6. 数据转换
    const formattedAccounts = accounts.map((account) => ({
      ...account,
      roles: account.roles.map((ar) => ar.role),
    }));

    return NextResponse.json({
      code: 0,
      msg: '获取成功',
      data: {
        list: formattedAccounts,
        page: query.page,
        pageSize: query.pageSize,
        total,
      },
    });
  } catch (error) {
    console.error('Get accounts error:', error);
    return handleApiError(error);
  }
}

// POST - 创建账户
export async function POST(request: NextRequest) {
  try {
    // 1. 身份验证
    const user = await getCurrentUser(request);
    if (!user) {
      return NextResponse.json({ code: 1, msg: '未授权访问', data: null }, { status: 401 });
    }

    // 2. 权限验证
    if (!hasPermission(user, 'account:create')) {
      return NextResponse.json({ code: 1, msg: '权限不足', data: null }, { status: 403 });
    }

    // 3. 参数验证
    const body = await request.json();
    const data = CreateAccountSchema.parse(body);

    // 4. 业务逻辑验证
    const existingAccount = await prisma.account.findUnique({
      where: { name: data.name },
    });

    if (existingAccount) {
      return NextResponse.json({ code: 1, msg: '用户名已存在', data: null }, { status: 400 });
    }

    // 5. 数据库事务操作
    const account = await prisma.$transaction(async (tx) => {
      // 创建账户
      const newAccount = await tx.account.create({
        data: {
          name: data.name,
          password: await hashPassword(data.password),
          operator: data.operator,
          status: 'ACTIVE',
        },
        select: {
          id: true,
          name: true,
          operator: true,
          status: true,
          createdAt: true,
          updatedAt: true,
        },
      });

      // 分配角色
      if (data.roleIds && data.roleIds.length > 0) {
        await tx.accountRole.createMany({
          data: data.roleIds.map((roleId) => ({
            accountId: newAccount.id,
            roleId,
          })),
        });
      }

      return newAccount;
    });

    // 6. 记录操作日志
    await logOperation({
      category: 'ACCOUNT',
      module: 'SYSTEM',
      operation: 'CREATE',
      operatorAccountId: user.id,
      details: { accountId: account.id, accountName: account.name },
    });

    return NextResponse.json({
      code: 0,
      msg: '创建成功',
      data: account,
    });
  } catch (error) {
    console.error('Create account error:', error);
    return handleApiError(error);
  }
}

// 统一错误处理
function handleApiError(error: any) {
  if (error instanceof z.ZodError) {
    return NextResponse.json(
      {
        code: 1,
        msg: '参数错误',
        data: error.errors.map((e) => ({
          field: e.path.join('.'),
          message: e.message,
        })),
      },
      { status: 400 }
    );
  }

  return NextResponse.json({ code: 1, msg: '服务器内部错误', data: null }, { status: 500 });
}
```

### 2. 动态路由处理

```typescript
// src/app/api/v1/accounts/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';

interface RouteContext {
  params: {
    id: string;
  };
}

// GET - 获取单个账户
export async function GET(request: NextRequest, context: RouteContext) {
  try {
    const { id } = context.params;

    // 参数验证
    if (!id || typeof id !== 'string') {
      return NextResponse.json({ code: 1, msg: '无效的账户ID', data: null }, { status: 400 });
    }

    // 身份验证
    const user = await getCurrentUser(request);
    if (!user) {
      return NextResponse.json({ code: 1, msg: '未授权访问', data: null }, { status: 401 });
    }

    // 权限验证
    if (!hasPermission(user, 'account:read')) {
      return NextResponse.json({ code: 1, msg: '权限不足', data: null }, { status: 403 });
    }

    // 数据查询
    const account = await prisma.account.findUnique({
      where: { id },
      select: {
        id: true,
        name: true,
        operator: true,
        status: true,
        createdAt: true,
        updatedAt: true,
        roles: {
          select: {
            role: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
      },
    });

    if (!account) {
      return NextResponse.json({ code: 1, msg: '账户不存在', data: null }, { status: 404 });
    }

    // 数据转换
    const formattedAccount = {
      ...account,
      roles: account.roles.map((ar) => ar.role),
    };

    return NextResponse.json({
      code: 0,
      msg: '获取成功',
      data: formattedAccount,
    });
  } catch (error) {
    console.error('Get account error:', error);
    return handleApiError(error);
  }
}

// PUT - 更新账户
export async function PUT(request: NextRequest, context: RouteContext) {
  try {
    const { id } = context.params;
    const body = await request.json();
    const data = UpdateAccountSchema.parse(body);

    // 验证账户存在
    const existingAccount = await prisma.account.findUnique({
      where: { id },
    });

    if (!existingAccount) {
      return NextResponse.json({ code: 1, msg: '账户不存在', data: null }, { status: 404 });
    }

    // 更新账户
    const updatedAccount = await prisma.account.update({
      where: { id },
      data: {
        ...data,
        updatedAt: new Date(),
      },
      select: {
        id: true,
        name: true,
        operator: true,
        status: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    return NextResponse.json({
      code: 0,
      msg: '更新成功',
      data: updatedAccount,
    });
  } catch (error) {
    console.error('Update account error:', error);
    return handleApiError(error);
  }
}

// DELETE - 删除账户
export async function DELETE(request: NextRequest, context: RouteContext) {
  try {
    const { id } = context.params;

    // 身份验证和权限验证
    const user = await getCurrentUser(request);
    if (!user || !hasPermission(user, 'account:delete')) {
      return NextResponse.json({ code: 1, msg: '权限不足', data: null }, { status: 403 });
    }

    // 验证账户存在
    const account = await prisma.account.findUnique({
      where: { id },
    });

    if (!account) {
      return NextResponse.json({ code: 1, msg: '账户不存在', data: null }, { status: 404 });
    }

    // 软删除
    await prisma.account.update({
      where: { id },
      data: {
        status: 'DELETED',
        updatedAt: new Date(),
      },
    });

    // 记录操作日志
    await logOperation({
      category: 'ACCOUNT',
      module: 'SYSTEM',
      operation: 'DELETE',
      operatorAccountId: user.id,
      details: { accountId: id, accountName: account.name },
    });

    return NextResponse.json({
      code: 0,
      msg: '删除成功',
      data: null,
    });
  } catch (error) {
    console.error('Delete account error:', error);
    return handleApiError(error);
  }
}
```

### 3. 认证中间件

```typescript
// src/lib/auth.ts
import { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';
import { prisma } from './db';

export interface AuthUser {
  id: string;
  name: string;
  roles: string[];
  permissions: string[];
}

export async function getCurrentUser(request: NextRequest): Promise<AuthUser | null> {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return null;
    }

    const token = authHeader.substring(7);
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;

    // 验证用户是否存在且状态正常
    const account = await prisma.account.findUnique({
      where: { id: decoded.id },
      select: {
        id: true,
        name: true,
        status: true,
      },
    });

    if (!account || account.status !== 'ACTIVE') {
      return null;
    }

    return {
      id: decoded.id,
      name: decoded.name,
      roles: decoded.roles || [],
      permissions: decoded.permissions || [],
    };
  } catch (error) {
    console.error('Get current user error:', error);
    return null;
  }
}

export function hasPermission(user: AuthUser, permission: string): boolean {
  return user.permissions.includes(permission);
}

export function hasRole(user: AuthUser, role: string): boolean {
  return user.roles.includes(role);
}

export function hasAnyPermission(user: AuthUser, permissions: string[]): boolean {
  return permissions.some((p) => user.permissions.includes(p));
}

export function hasAllPermissions(user: AuthUser, permissions: string[]): boolean {
  return permissions.every((p) => user.permissions.includes(p));
}
```

## 数据验证规范

### 1. 输入验证

使用 Zod 进行严格的输入验证：

```typescript
import { z } from 'zod';

// 基础验证规则
const BaseSchema = {
  id: z.string().cuid('无效的ID格式'),
  name: z.string().min(1, '名称不能为空').max(50, '名称过长'),
  email: z.string().email('邮箱格式错误'),
  phone: z.string().regex(/^1[3-9]\d{9}$/, '手机号格式错误'),
  password: z.string().min(6, '密码至少6个字符').max(128, '密码过长'),
  url: z.string().url('URL格式错误'),
  date: z.string().datetime('日期格式错误'),
  enum: (values: string[]) => z.enum(values as [string, ...string[]]),
  pagination: z.object({
    page: z.coerce.number().min(1).default(1),
    pageSize: z.coerce.number().min(1).max(100).default(10),
  }),
};

// 业务验证规则
const AccountSchema = z.object({
  name: BaseSchema.name,
  password: BaseSchema.password,
  operator: BaseSchema.name,
  status: BaseSchema.enum(['ACTIVE', 'INACTIVE']).optional(),
  roleIds: z.array(BaseSchema.id).optional(),
});

const ProductSchema = z.object({
  shopId: BaseSchema.id,
  categoryId: BaseSchema.id,
  code: z.string().min(1, '产品编码不能为空'),
  specification: z.string().optional(),
  color: z.string().optional(),
  setQuantity: z.number().int().min(1).default(1),
  weight: z.number().positive().optional(),
  sku: z.string().min(1, 'SKU不能为空'),
  imageUrl: BaseSchema.url.optional(),
});
```

### 2. 输出过滤

确保敏感信息不会泄露：

```typescript
// 用户信息输出过滤
export function filterUserOutput(user: any) {
  const { password, ...safeUser } = user;
  return safeUser;
}

// 批量过滤
export function filterUsersOutput(users: any[]) {
  return users.map(filterUserOutput);
}

// 通用字段过滤
export function omitFields<T>(obj: T, fields: (keyof T)[]): Omit<T, keyof T> {
  const result = { ...obj };
  fields.forEach((field) => delete result[field]);
  return result;
}
```

## 错误处理规范

### 1. 统一错误响应

```typescript
// src/lib/api-error.ts
export class ApiError extends Error {
  constructor(
    public code: number,
    public message: string,
    public statusCode: number = 500,
    public data?: any
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

// 常见错误类型
export const ApiErrors = {
  UNAUTHORIZED: new ApiError(1, '未授权访问', 401),
  FORBIDDEN: new ApiError(1, '权限不足', 403),
  NOT_FOUND: new ApiError(1, '资源不存在', 404),
  VALIDATION_ERROR: new ApiError(1, '参数验证失败', 400),
  DUPLICATE_ERROR: new ApiError(1, '数据已存在', 400),
  INTERNAL_ERROR: new ApiError(1, '服务器内部错误', 500),
};

// 错误处理中间件
export function handleApiError(error: any): NextResponse {
  if (error instanceof ApiError) {
    return NextResponse.json(
      { code: error.code, msg: error.message, data: error.data },
      { status: error.statusCode }
    );
  }

  if (error instanceof z.ZodError) {
    return NextResponse.json(
      {
        code: 1,
        msg: '参数验证失败',
        data: error.errors.map((e) => ({
          field: e.path.join('.'),
          message: e.message,
        })),
      },
      { status: 400 }
    );
  }

  console.error('Unhandled API error:', error);
  return NextResponse.json({ code: 1, msg: '服务器内部错误', data: null }, { status: 500 });
}
```

### 2. 操作日志记录

```typescript
// src/lib/logger.ts
interface LogData {
  category: string;
  module: string;
  operation: string;
  operatorAccountId: string;
  status?: string;
  details?: any;
}

export async function logOperation(data: LogData) {
  try {
    await prisma.log.create({
      data: {
        category: data.category,
        module: data.module,
        operation: data.operation,
        operatorAccountId: data.operatorAccountId,
        status: data.status || 'SUCCESS',
        details: data.details || {},
        createdAt: new Date(),
      },
    });
  } catch (error) {
    console.error('Failed to log operation:', error);
  }
}
```

## 测试规范

### 1. API 路由测试

```typescript
// __tests__/api/accounts.test.ts
import { createMocks } from 'node-mocks-http';
import { GET, POST } from '@/app/api/v1/accounts/route';

describe('/api/v1/accounts', () => {
  beforeEach(() => {
    // 清理测试数据
    jest.clearAllMocks();
  });

  describe('GET /api/v1/accounts', () => {
    it('should return accounts list for authorized user', async () => {
      const { req } = createMocks({
        method: 'GET',
        headers: {
          authorization: 'Bearer valid-token',
        },
        query: { page: '1', pageSize: '10' },
      });

      const response = await GET(req);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data.code).toBe(0);
      expect(data.data.list).toBeDefined();
    });

    it('should return 401 for unauthorized user', async () => {
      const { req } = createMocks({
        method: 'GET',
      });

      const response = await GET(req);
      expect(response.status).toBe(401);
    });
  });

  describe('POST /api/v1/accounts', () => {
    it('should create account successfully', async () => {
      const { req } = createMocks({
        method: 'POST',
        headers: {
          authorization: 'Bearer valid-token',
        },
        body: {
          name: 'testuser',
          password: 'password123',
          operator: 'admin',
        },
      });

      const response = await POST(req);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data.code).toBe(0);
      expect(data.data.name).toBe('testuser');
    });

    it('should return validation error for invalid data', async () => {
      const { req } = createMocks({
        method: 'POST',
        headers: {
          authorization: 'Bearer valid-token',
        },
        body: {
          name: '', // 无效数据
          password: '123', // 密码过短
        },
      });

      const response = await POST(req);
      expect(response.status).toBe(400);
    });
  });
});
```

### 2. 集成测试

```typescript
// __tests__/integration/accounts.test.ts
import { testApiHandler } from 'next-test-api-route-handler';
import * as accountsHandler from '@/app/api/v1/accounts/route';

describe('Accounts API Integration', () => {
  it('should complete full CRUD operations', async () => {
    let accountId: string;

    // 创建账户
    await testApiHandler({
      handler: accountsHandler,
      test: async ({ fetch }) => {
        const res = await fetch({
          method: 'POST',
          body: JSON.stringify({
            name: 'testuser',
            password: 'password123',
            operator: 'admin',
          }),
        });

        expect(res.status).toBe(200);
        const data = await res.json();
        accountId = data.data.id;
      },
    });

    // 获取账户
    await testApiHandler({
      handler: accountsHandler,
      test: async ({ fetch }) => {
        const res = await fetch({
          method: 'GET',
          query: { page: '1', pageSize: '10' },
        });

        expect(res.status).toBe(200);
        const data = await res.json();
        expect(data.data.list).toContainEqual(expect.objectContaining({ id: accountId }));
      },
    });
  });
});
```

这些 API 开发规范确保了接口的一致性、安全性和可维护性，是 Easy ERP Web 项目后端开发的重要指导。
description:
globs:
alwaysApply: false

---
