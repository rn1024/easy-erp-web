---
description:
globs:
alwaysApply: true
---
# 安全开发规范

## 身份验证与授权

### JWT 安全实践

1. **Token 管理** (参考 [auth.ts](mdc:src/lib/auth.ts))
   ```typescript
   // 使用强随机密钥
   const JWT_SECRET = process.env.JWT_SECRET; // 至少 256 位

   // 设置合理的过期时间
   const generateToken = (payload: any) => {
     return jwt.sign(payload, JWT_SECRET, {
       expiresIn: '1h',        // 访问令牌短期有效
       algorithm: 'HS256'      // 使用安全算法
     });
   };

   // Refresh Token 策略
   const generateRefreshToken = (payload: any) => {
     return jwt.sign(payload, JWT_SECRET, {
       expiresIn: '7d'         // 刷新令牌长期有效
     });
   };
   ```

2. **Token 验证** (参考 [middleware.ts](mdc:src/lib/middleware.ts))
   ```typescript
   // 严格验证 Token
   export const verifyToken = async (token: string) => {
     try {
       const decoded = jwt.verify(token, JWT_SECRET);
       return { valid: true, payload: decoded };
     } catch (error) {
       // 记录安全事件
       console.error('Token validation failed:', error.message);
       return { valid: false, error: error.message };
     }
   };

   // 中间件实现
   export const authMiddleware = async (req: NextRequest) => {
     const token = req.headers.get('authorization')?.replace('Bearer ', '');

     if (!token) {
       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
     }

     const result = await verifyToken(token);
     if (!result.valid) {
       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
     }

     return NextResponse.next();
   };
   ```

### 权限控制

1. **基于角色的访问控制** (参考 [permission.ts](mdc:src/components/permission.tsx))
   ```typescript
   // 权限验证组件
   interface PermissionProps {
     required: string[];
     children: React.ReactNode;
     fallback?: React.ReactNode;
   }

   export const Permission: React.FC<PermissionProps> = ({
     required,
     children,
     fallback = null
   }) => {
     const { user } = useAuth();

     const hasPermission = required.every(permission =>
       user?.permissions?.includes(permission)
     );

     return hasPermission ? children : fallback;
   };
   ```

2. **API 权限检查**
   ```typescript
   // 参考 API 路由实现
   export async function POST(request: NextRequest) {
     // 1. 身份验证
     const user = await getCurrentUser(request);
     if (!user) {
       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
     }

     // 2. 权限验证
     if (!hasPermission(user, 'ADMIN_ACCESS')) {
       return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
     }

     // 3. 执行业务逻辑
     // ...
   }
   ```

## 输入验证与数据安全

### 输入验证

1. **API 参数验证**
   ```typescript
   // 使用 Zod 进行类型验证
   import { z } from 'zod';

   const LoginSchema = z.object({
     username: z.string()
       .min(3, '用户名至少3个字符')
       .max(50, '用户名最多50个字符')
       .regex(/^[a-zA-Z0-9_]+$/, '用户名只能包含字母、数字和下划线'),
     password: z.string()
       .min(8, '密码至少8个字符')
       .max(128, '密码最多128个字符')
   });

   export async function POST(request: NextRequest) {
     try {
       const body = await request.json();

       // 验证输入参数
       const validatedData = LoginSchema.parse(body);

       // 处理业务逻辑
       const result = await login(validatedData);

       return NextResponse.json(result);
     } catch (error) {
       if (error instanceof z.ZodError) {
         return NextResponse.json({
           error: 'Invalid input',
           details: error.errors
         }, { status: 400 });
       }

       throw error;
     }
   }
   ```

2. **SQL 注入防护** (参考 [db.ts](mdc:src/lib/db.ts))
   ```typescript
   // 使用 Prisma ORM 自动防护 SQL 注入
   const getUser = async (id: string) => {
     // ✅ 安全：使用参数化查询
     return await prisma.user.findUnique({
       where: { id: parseInt(id) }
     });
   };

   // ❌ 危险：直接拼接 SQL
   // const query = `SELECT * FROM users WHERE id = ${id}`;
   ```

### XSS 防护

1. **输出转义**
   ```typescript
   // 自动转义用户输入
   import DOMPurify from 'dompurify';

   const sanitizeHtml = (html: string) => {
     return DOMPurify.sanitize(html, {
       ALLOWED_TAGS: ['b', 'i', 'em', 'strong'],
       ALLOWED_ATTR: []
     });
   };

   // 在组件中使用
   const UserContent = ({ content }: { content: string }) => {
     return (
       <div
         dangerouslySetInnerHTML={{
           __html: sanitizeHtml(content)
         }}
       />
     );
   };
   ```

2. **CSP 配置**
   ```typescript
   // next.config.ts
   const nextConfig = {
     async headers() {
       return [
         {
           source: '/(.*)',
           headers: [
             {
               key: 'Content-Security-Policy',
               value: [
                 "default-src 'self'",
                 "script-src 'self' 'unsafe-inline'",
                 "style-src 'self' 'unsafe-inline'",
                 "img-src 'self' data: blob:",
                 "connect-src 'self'",
                 "font-src 'self'",
               ].join('; ')
             }
           ]
         }
       ];
     }
   };
   ```

## 文件安全

### 文件上传安全 (参考 [upload/route.ts](mdc:src/app/api/v1/upload/route.ts))

1. **文件类型验证**
   ```typescript
   const ALLOWED_TYPES = [
     'image/jpeg',
     'image/png',
     'image/gif',
     'application/pdf',
     'text/plain'
   ];

   const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

   export async function POST(request: NextRequest) {
     try {
       const formData = await request.formData();
       const file = formData.get('file') as File;

       // 验证文件类型
       if (!ALLOWED_TYPES.includes(file.type)) {
         return NextResponse.json({
           error: '不支持的文件类型'
         }, { status: 400 });
       }

       // 验证文件大小
       if (file.size > MAX_FILE_SIZE) {
         return NextResponse.json({
           error: '文件大小超过限制'
         }, { status: 400 });
       }

       // 重命名文件避免路径遍历
       const safeFileName = generateSafeFileName(file.name);

       // 上传到安全目录
       const uploadPath = path.join('/safe/upload/dir', safeFileName);

       // 处理文件上传...

     } catch (error) {
       return NextResponse.json({
         error: '文件上传失败'
       }, { status: 500 });
     }
   }

   const generateSafeFileName = (originalName: string) => {
     const ext = path.extname(originalName);
     const timestamp = Date.now();
     const random = Math.random().toString(36).substring(2);
     return `${timestamp}_${random}${ext}`;
   };
   ```

2. **阿里云 OSS 安全配置** (参考 [oss.ts](mdc:src/lib/oss.ts))
   ```typescript
   // 使用临时凭证
   const getSTSToken = async () => {
     // 从服务端获取临时访问凭证
     const response = await fetch('/api/v1/sts-token', {
       headers: {
         'Authorization': `Bearer ${getAccessToken()}`
       }
     });

     return response.json();
   };

   // 限制上传策略
   const uploadPolicy = {
     expiration: new Date(Date.now() + 60 * 60 * 1000), // 1小时有效期
     conditions: [
       ['content-length-range', 0, MAX_FILE_SIZE],
       ['starts-with', '$key', 'uploads/'],
       ['in', '$content-type', ALLOWED_TYPES]
     ]
   };
   ```

## 数据库安全

### 敏感数据处理 (参考 [schema.prisma](mdc:prisma/schema.prisma))

1. **密码加密**
   ```typescript
   import bcrypt from 'bcryptjs';

   // 密码加密
   export const hashPassword = async (password: string) => {
     const saltRounds = 12; // 使用足够的盐轮数
     return await bcrypt.hash(password, saltRounds);
   };

   // 密码验证
   export const verifyPassword = async (password: string, hashedPassword: string) => {
     return await bcrypt.compare(password, hashedPassword);
   };

   // 用户创建
   const createUser = async (userData: CreateUserData) => {
     const hashedPassword = await hashPassword(userData.password);

     return await prisma.user.create({
       data: {
         ...userData,
         password: hashedPassword
       }
     });
   };
   ```

2. **敏感字段保护**
   ```typescript
   // 数据查询时排除敏感字段
   const getUserProfile = async (id: string) => {
     return await prisma.user.findUnique({
       where: { id },
       select: {
         id: true,
         username: true,
         email: true,
         // 排除密码字段
         password: false,
         createdAt: true,
         updatedAt: true
       }
     });
   };
   ```

## 网络安全

### HTTPS 强制

1. **重定向配置**
   ```typescript
   // middleware.ts
   export function middleware(request: NextRequest) {
     // 强制 HTTPS
     if (!request.url.startsWith('https://') && process.env.NODE_ENV === 'production') {
       return NextResponse.redirect(
         request.url.replace('http://', 'https://'),
         301
       );
     }

     return NextResponse.next();
   }
   ```

2. **安全响应头**
   ```typescript
   // next.config.ts
   const securityHeaders = [
     {
       key: 'X-DNS-Prefetch-Control',
       value: 'on'
     },
     {
       key: 'Strict-Transport-Security',
       value: 'max-age=63072000; includeSubDomains; preload'
     },
     {
       key: 'X-XSS-Protection',
       value: '1; mode=block'
     },
     {
       key: 'X-Frame-Options',
       value: 'DENY'
     },
     {
       key: 'X-Content-Type-Options',
       value: 'nosniff'
     },
     {
       key: 'Referrer-Policy',
       value: 'origin-when-cross-origin'
     }
   ];
   ```

### CORS 配置

```typescript
// 严格的 CORS 配置
const corsOptions = {
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['https://yourdomain.com'],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  optionsSuccessStatus: 200
};
```

## 错误处理与日志

### 安全日志

1. **敏感操作记录**
   ```typescript
   // 记录安全相关事件
   const logSecurityEvent = async (event: SecurityEvent) => {
     await prisma.securityLog.create({
       data: {
         event: event.type,
         userId: event.userId,
         ip: event.ip,
         userAgent: event.userAgent,
         timestamp: new Date(),
         details: event.details
       }
     });
   };

   // 登录失败记录
   const handleLoginFailed = async (username: string, ip: string) => {
     await logSecurityEvent({
       type: 'LOGIN_FAILED',
       userId: null,
       ip,
       userAgent: request.headers.get('user-agent'),
       details: { username, reason: 'invalid_credentials' }
     });
   };
   ```

2. **错误信息脱敏**
   ```typescript
   // 生产环境隐藏详细错误信息
   const handleError = (error: Error) => {
     // 记录完整错误信息到日志
     console.error('Detailed error:', error);

     // 返回脱敏的错误信息
     if (process.env.NODE_ENV === 'production') {
       return { error: '服务器内部错误' };
     } else {
       return { error: error.message, stack: error.stack };
     }
   };
   ```

## 依赖安全

### 包安全扫描

```bash
# 定期运行安全审计
pnpm audit

# 修复已知漏洞
pnpm audit --fix

# 检查过期依赖
pnpm outdated
```

### 环境变量管理

1. **敏感配置保护**
   ```bash
   # .env.example (提交到版本控制)
   DATABASE_URL="postgresql://user:password@localhost:5432/dbname"
   JWT_SECRET="your-secret-key"
   OSS_ACCESS_KEY_ID="your-access-key"

   # .env.local (不提交到版本控制)
   DATABASE_URL="postgresql://real-user:real-password@real-host:5432/real-db"
   JWT_SECRET="real-secret-key-with-256-bits"
   OSS_ACCESS_KEY_ID="real-access-key"
   ```

2. **运行时验证**
   ```typescript
   // 验证必要的环境变量
   const requiredEnvVars = [
     'DATABASE_URL',
     'JWT_SECRET',
     'OSS_ACCESS_KEY_ID'
   ];

   requiredEnvVars.forEach(envVar => {
     if (!process.env[envVar]) {
       throw new Error(`Missing required environment variable: ${envVar}`);
     }
   });
   ```

## 安全测试

### 渗透测试清单

1. **身份验证测试**
   - [ ] 弱密码检查
   - [ ] 暴力破解防护
   - [ ] 会话固定攻击
   - [ ] Token 劫持防护

2. **授权测试**
   - [ ] 垂直权限提升
   - [ ] 水平权限提升
   - [ ] 访问控制绕过

3. **输入验证测试**
   - [ ] SQL 注入测试
   - [ ] XSS 攻击测试
   - [ ] CSRF 攻击测试
   - [ ] 文件上传漏洞

4. **业务逻辑测试**
   - [ ] 价格篡改
   - [ ] 并发访问控制
   - [ ] 业务流程绕过
