# Easy ERP Web - Next.js 开发规范

## Next.js 14 App Router 规范

### 页面路由结构

基于 Next.js 14 App Router 约定，遵循以下路由结构：

```
src/app/
├── layout.tsx              # 根布局（必需）
├── page.tsx                # 首页
├── loading.tsx             # 加载状态
├── error.tsx               # 错误页面
├── not-found.tsx           # 404 页面
├── (auth)/                 # 路由组（不影响URL）
│   └── login/
│       ├── page.tsx        # 登录页面
│       └── loading.tsx     # 登录加载状态
├── dashboard/
│   ├── page.tsx            # 仪表板页面
│   └── loading.tsx         # 仪表板加载状态
├── system/
│   ├── layout.tsx          # 系统管理布局
│   ├── accounts/
│   │   ├── page.tsx        # 账户管理页面
│   │   └── components/     # 页面专用组件
│   └── roles/
│       ├── page.tsx        # 角色管理页面
│       └── components/     # 页面专用组件
└── api/v1/                 # API 路由
    ├── auth/
    │   ├── login/
    │   │   └── route.ts    # POST /api/v1/auth/login
    │   └── refresh/
    │       └── route.ts    # POST /api/v1/auth/refresh
    └── accounts/
        ├── route.ts        # GET/POST /api/v1/accounts
        └── [id]/
            └── route.ts    # GET/PUT/DELETE /api/v1/accounts/[id]
```

### 页面组件开发规范

#### 1. 页面组件结构

```typescript
// src/app/system/accounts/page.tsx
'use client';

import React, { useState } from 'react';
import { Button, Table, Space, message } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';
import { useRequest } from 'ahooks';
import { FormattedMessage } from 'react-intl';

// 服务导入
import { getAccounts, deleteAccount } from '@/services/account';

// 组件导入
import AccountFormDrawer from './components/account-form-drawer';
import Permission from '@/components/permission';

// 类型导入
import type { Account } from '@/types/api';

// 页面组件
const AccountsPage: React.FC = () => {
  // 1. 状态管理
  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);
  const [drawerVisible, setDrawerVisible] = useState(false);

  // 2. 数据请求
  const { data, loading, refresh } = useRequest(getAccounts, {
    defaultParams: [{
      page: 1,
      pageSize: 10,
    }],
  });

  // 3. 事件处理
  const handleAdd = () => {
    setSelectedAccount(null);
    setDrawerVisible(true);
  };

  const handleEdit = (record: Account) => {
    setSelectedAccount(record);
    setDrawerVisible(true);
  };

  const handleDelete = async (id: string) => {
    try {
      await deleteAccount(id);
      message.success('删除成功');
      refresh();
    } catch (error) {
      message.error('删除失败');
    }
  };

  // 4. 表格配置
  const columns = [
    {
      title: <FormattedMessage id="account.name" />,
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: <FormattedMessage id="common.actions" />,
      key: 'actions',
      render: (_, record: Account) => (
        <Space>
          <Permission required={['account:edit']}>
            <Button
              type="link"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record)}
            >
              <FormattedMessage id="common.edit" />
            </Button>
          </Permission>
          <Permission required={['account:delete']}>
            <Button
              type="link"
              danger
              icon={<DeleteOutlined />}
              onClick={() => handleDelete(record.id)}
            >
              <FormattedMessage id="common.delete" />
            </Button>
          </Permission>
        </Space>
      ),
    },
  ];

  // 5. 渲染
  return (
    <div>
      <div style={{ marginBottom: 16 }}>
        <Permission required={['account:add']}>
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={handleAdd}
          >
            <FormattedMessage id="common.add" />
          </Button>
        </Permission>
      </div>

      <Table
        columns={columns}
        dataSource={data?.list || []}
        loading={loading}
        rowKey="id"
        pagination={{
          current: data?.page || 1,
          pageSize: data?.pageSize || 10,
          total: data?.total || 0,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total, range) =>
            `${range[0]}-${range[1]} of ${total} items`,
        }}
      />

      <AccountFormDrawer
        visible={drawerVisible}
        account={selectedAccount}
        onClose={() => setDrawerVisible(false)}
        onSuccess={() => {
          setDrawerVisible(false);
          refresh();
        }}
      />
    </div>
  );
};

export default AccountsPage;
```

#### 2. 布局组件规范

```typescript
// src/app/system/layout.tsx
import React from 'react';
import { Breadcrumb } from 'antd';
import { FormattedMessage } from 'react-intl';

interface SystemLayoutProps {
  children: React.ReactNode;
}

const SystemLayout: React.FC<SystemLayoutProps> = ({ children }) => {
  return (
    <div>
      <Breadcrumb style={{ marginBottom: 16 }}>
        <Breadcrumb.Item>
          <FormattedMessage id="menu.system" />
        </Breadcrumb.Item>
      </Breadcrumb>
      {children}
    </div>
  );
};

export default SystemLayout;
```

### API 路由开发规范

#### 1. API 路由结构

```typescript
// src/app/api/v1/accounts/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

// 工具导入
import { prisma } from '@/lib/db';
import { getCurrentUser } from '@/lib/auth';

// 验证 Schema
const CreateAccountSchema = z.object({
  name: z.string().min(1, '用户名不能为空'),
  password: z.string().min(6, '密码至少6个字符'),
  operator: z.string().min(1, '操作员不能为空'),
});

const GetAccountsSchema = z.object({
  page: z.coerce.number().min(1).default(1),
  pageSize: z.coerce.number().min(1).max(100).default(10),
  name: z.string().optional(),
});

// GET /api/v1/accounts - 获取账户列表
export async function GET(request: NextRequest) {
  try {
    // 1. 身份验证
    const user = await getCurrentUser(request);
    if (!user) {
      return NextResponse.json({ code: 1, msg: '未授权访问', data: null }, { status: 401 });
    }

    // 2. 权限验证
    if (!user.permissions.includes('account:read')) {
      return NextResponse.json({ code: 1, msg: '权限不足', data: null }, { status: 403 });
    }

    // 3. 参数验证
    const { searchParams } = new URL(request.url);
    const params = GetAccountsSchema.parse({
      page: searchParams.get('page'),
      pageSize: searchParams.get('pageSize'),
      name: searchParams.get('name'),
    });

    // 4. 数据查询
    const where = params.name
      ? {
          name: {
            contains: params.name,
          },
        }
      : {};

    const [accounts, total] = await Promise.all([
      prisma.account.findMany({
        where,
        select: {
          id: true,
          name: true,
          operator: true,
          status: true,
          createdAt: true,
          updatedAt: true,
        },
        skip: (params.page - 1) * params.pageSize,
        take: params.pageSize,
        orderBy: {
          createdAt: 'desc',
        },
      }),
      prisma.account.count({ where }),
    ]);

    // 5. 返回结果
    return NextResponse.json({
      code: 0,
      msg: '获取成功',
      data: {
        list: accounts,
        page: params.page,
        pageSize: params.pageSize,
        total,
      },
    });
  } catch (error) {
    console.error('Get accounts error:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json({ code: 1, msg: '参数错误', data: error.errors }, { status: 400 });
    }

    return NextResponse.json({ code: 1, msg: '服务器错误', data: null }, { status: 500 });
  }
}

// POST /api/v1/accounts - 创建账户
export async function POST(request: NextRequest) {
  try {
    // 1. 身份验证
    const user = await getCurrentUser(request);
    if (!user) {
      return NextResponse.json({ code: 1, msg: '未授权访问', data: null }, { status: 401 });
    }

    // 2. 权限验证
    if (!user.permissions.includes('account:create')) {
      return NextResponse.json({ code: 1, msg: '权限不足', data: null }, { status: 403 });
    }

    // 3. 参数验证
    const body = await request.json();
    const validatedData = CreateAccountSchema.parse(body);

    // 4. 业务逻辑
    const existingAccount = await prisma.account.findUnique({
      where: { name: validatedData.name },
    });

    if (existingAccount) {
      return NextResponse.json({ code: 1, msg: '用户名已存在', data: null }, { status: 400 });
    }

    // 5. 数据创建
    const account = await prisma.account.create({
      data: {
        ...validatedData,
        password: await hashPassword(validatedData.password),
      },
      select: {
        id: true,
        name: true,
        operator: true,
        status: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    // 6. 返回结果
    return NextResponse.json({
      code: 0,
      msg: '创建成功',
      data: account,
    });
  } catch (error) {
    console.error('Create account error:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json({ code: 1, msg: '参数错误', data: error.errors }, { status: 400 });
    }

    return NextResponse.json({ code: 1, msg: '服务器错误', data: null }, { status: 500 });
  }
}
```

#### 2. 动态路由处理

```typescript
// src/app/api/v1/accounts/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';

interface Context {
  params: {
    id: string;
  };
}

// GET /api/v1/accounts/[id] - 获取单个账户
export async function GET(request: NextRequest, context: Context) {
  try {
    const { id } = context.params;

    // 验证ID格式
    if (!id || typeof id !== 'string') {
      return NextResponse.json({ code: 1, msg: '无效的账户ID', data: null }, { status: 400 });
    }

    // 其他处理逻辑...
  } catch (error) {
    console.error('Get account error:', error);
    return NextResponse.json({ code: 1, msg: '服务器错误', data: null }, { status: 500 });
  }
}
```

### 客户端状态管理规范

#### 1. 使用 ahooks 管理服务端状态

```typescript
// 在页面组件中使用 useRequest
const { data, loading, error, refresh } = useRequest(getAccounts, {
  defaultParams: [{ page: 1, pageSize: 10 }],
  refreshDeps: [searchParams], // 依赖项变化时自动刷新
  debounceWait: 300, // 防抖
  loadingDelay: 300, // 加载状态延迟
});
```

#### 2. 使用 Zustand 管理客户端状态

```typescript
// src/store/layout.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface LayoutStore {
  collapsed: boolean;
  setCollapsed: (collapsed: boolean) => void;
  theme: 'light' | 'dark';
  setTheme: (theme: 'light' | 'dark') => void;
}

export const useLayoutStore = create<LayoutStore>()(
  persist(
    (set) => ({
      collapsed: false,
      setCollapsed: (collapsed) => set({ collapsed }),
      theme: 'light',
      setTheme: (theme) => set({ theme }),
    }),
    {
      name: 'layout-store',
    }
  )
);
```

### 错误处理规范

#### 1. 错误边界组件

```typescript
// src/components/error-boundary.tsx
'use client';

import React from 'react';
import { Button, Result } from 'antd';

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <Result
          status="error"
          title="Something went wrong"
          subTitle="An error occurred while rendering this page."
          extra={
            <Button type="primary" onClick={() => window.location.reload()}>
              Reload Page
            </Button>
          }
        />
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

#### 2. 全局错误处理

```typescript
// src/app/error.tsx
'use client';

import { useEffect } from 'react';
import { Button, Result } from 'antd';

interface ErrorProps {
  error: Error & { digest?: string };
  reset: () => void;
}

const Error: React.FC<ErrorProps> = ({ error, reset }) => {
  useEffect(() => {
    console.error('Global error:', error);
  }, [error]);

  return (
    <Result
      status="error"
      title="Something went wrong!"
      subTitle={error.message}
      extra={
        <Button type="primary" onClick={reset}>
          Try again
        </Button>
      }
    />
  );
};

export default Error;
```

### 性能优化规范

#### 1. 组件懒加载

```typescript
import dynamic from 'next/dynamic';

// 动态导入组件
const AccountFormDrawer = dynamic(
  () => import('./components/account-form-drawer'),
  {
    loading: () => <div>Loading...</div>,
    ssr: false, // 禁用服务端渲染
  }
);
```

#### 2. 图片优化

```typescript
import Image from 'next/image';

// 使用 Next.js Image 组件
<Image
  src="/images/logo.png"
  alt="Logo"
  width={200}
  height={50}
  priority // 首屏图片优先加载
  placeholder="blur" // 加载时显示模糊效果
  blurDataURL="data:image/jpeg;base64,..." // 模糊图片数据
/>
```

#### 3. 代码分割

```typescript
// 按路由分割代码
const DynamicComponent = dynamic(() => import('./heavy-component'), {
  loading: () => <p>Loading...</p>,
});

// 条件加载
const AdminPanel = dynamic(
  () => import('./admin-panel'),
  {
    loading: () => <div>Loading admin panel...</div>,
    ssr: false,
  }
);
```

### 测试规范

#### 1. 页面组件测试

```typescript
// __tests__/pages/accounts.test.tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AccountsPage from '@/app/system/accounts/page';

// Mock API
jest.mock('@/services/account', () => ({
  getAccounts: jest.fn(),
  deleteAccount: jest.fn(),
}));

describe('AccountsPage', () => {
  it('should render accounts table', async () => {
    render(<AccountsPage />);

    await waitFor(() => {
      expect(screen.getByText('账户管理')).toBeInTheDocument();
    });
  });

  it('should handle account deletion', async () => {
    render(<AccountsPage />);

    const deleteButton = screen.getByText('删除');
    fireEvent.click(deleteButton);

    await waitFor(() => {
      expect(screen.getByText('确认删除')).toBeInTheDocument();
    });
  });
});
```

#### 2. API 路由测试

```typescript
// __tests__/api/accounts.test.ts
import { createMocks } from 'node-mocks-http';
import { GET, POST } from '@/app/api/v1/accounts/route';

describe('/api/v1/accounts', () => {
  it('should return accounts list', async () => {
    const { req, res } = createMocks({
      method: 'GET',
      query: { page: '1', pageSize: '10' },
    });

    const response = await GET(req);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data.code).toBe(0);
    expect(data.data.list).toBeDefined();
  });
});
```

这些规范确保了 Next.js 14 项目的一致性、可维护性和性能优化。
description:
globs:
alwaysApply: false

---
