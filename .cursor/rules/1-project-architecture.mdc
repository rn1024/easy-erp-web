# Easy ERP Web 项目架构规范

## 核心技术栈

### 前端技术栈

- **框架**: Next.js 14 (App Router) - 现代化全栈 React 框架
- **UI 组件库**: Ant Design 5.x + Pro Components - 企业级 UI 组件
- **状态管理**: Zustand - 轻量级状态管理
- **请求库**: Axios + ahooks - 支持自动重试和缓存
- **国际化**: react-intl - 多语言支持
- **样式**: CSS Modules + Tailwind CSS

### 后端技术栈

- **API 路由**: Next.js 14 API Routes - 服务端渲染和 API 一体化
- **数据库**: MySQL + Prisma ORM - 类型安全的数据库访问
- **认证**: JWT + Redis - 无状态认证和会话管理
- **文件存储**: 阿里云 OSS - 企业级文件存储
- **缓存**: Redis - 高性能缓存和会话存储

### 开发工具

- **语言**: TypeScript - 类型安全开发
- **代码质量**: ESLint + Prettier + Husky - 代码规范和自动化
- **测试**: Jest + React Testing Library - 单元测试和集成测试
- **包管理**: pnpm - 快速、磁盘空间效率高的包管理器

## 项目结构

### 应用层 (`src/app/`)

```
src/app/
├── (auth)/
│   └── login/              # 登录页面
├── dashboard/              # 仪表板
├── system/                 # 系统管理模块
│   ├── accounts/           # 账户管理
│   ├── roles/              # 角色管理
│   ├── shops/              # 店铺管理
│   ├── suppliers/          # 供应商管理
│   ├── products/           # 产品管理
│   ├── inventory/          # 库存管理
│   └── logs/               # 系统日志
├── api/v1/                 # API 路由
│   ├── auth/               # 认证接口
│   ├── accounts/           # 账户接口
│   ├── roles/              # 角色接口
│   └── ...                 # 其他业务接口
├── layout.tsx              # 根布局
└── page.tsx                # 首页
```

### 组件层 (`src/components/`)

```
src/components/
├── admin-layout.tsx        # 管理后台布局
├── ui/                     # 基础 UI 组件
├── table-cell/             # 表格单元格组件
├── permission.tsx          # 权限控制组件
└── ...                     # 其他业务组件
```

### 服务层 (`src/services/`)

```
src/services/
├── index.ts                # Axios 配置和拦截器
├── auth.ts                 # 认证服务
├── account.ts              # 账户服务
├── roles.ts                # 角色服务
└── ...                     # 其他业务服务
```

### 工具层 (`src/lib/`)

```
src/lib/
├── auth.ts                 # JWT 工具
├── db.ts                   # 数据库连接
├── redis.ts                # Redis 连接
├── oss.ts                  # 文件存储工具
└── middleware.ts           # 中间件工具
```

## 架构设计原则

### 1. 模块化设计

- 按功能模块组织代码，每个模块包含页面、组件、服务和类型定义
- 组件高内聚、低耦合，易于维护和扩展

### 2. 类型安全

- 全面使用 TypeScript，确保编译时类型检查
- 数据库 Schema 与 TypeScript 类型双向同步
- API 接口使用统一的类型定义

### 3. 服务端渲染优化

- 使用 Next.js 14 App Router 实现服务端渲染
- 动态导入组件，减少初始加载时间
- 合理使用缓存策略

### 4. 安全性设计

- JWT 认证 + Redis 会话管理
- 权限控制粒度到按钮级别
- 输入验证和输出转义防护

### 5. 性能优化

- 图片懒加载和压缩
- 代码分割和按需加载
- 数据库查询优化和索引设计

## 开发环境配置

### 必需环境

```bash
# Node.js 18+
node --version

# pnpm 包管理器
npm install -g pnpm

# 数据库
MySQL 8.0+
Redis 6.0+
```

### 环境变量

```bash
# 数据库配置
DATABASE_URL="mysql://user:password@localhost:3306/easy_erp"

# Redis 配置
REDIS_URL="redis://localhost:6379"

# JWT 配置
JWT_SECRET="your-256-bit-secret"
JWT_REFRESH_SECRET="your-refresh-secret"

# 阿里云 OSS 配置
OSS_REGION="oss-cn-hangzhou"
OSS_ACCESS_KEY_ID="your-access-key"
OSS_ACCESS_KEY_SECRET="your-secret-key"
OSS_BUCKET="your-bucket"
```

### 开发流程

```bash
# 1. 安装依赖
pnpm install

# 2. 数据库初始化
pnpm db:generate
pnpm db:push
pnpm db:seed

# 3. 启动开发服务器
pnpm dev

# 4. 运行测试
pnpm test

# 5. 构建项目
pnpm build
```

## 部署架构

### 生产环境

- **容器化**: Docker + Docker Compose
- **反向代理**: Nginx
- **SSL 证书**: Let's Encrypt
- **监控**: PM2 + 日志收集

### 性能监控

- **应用性能**: Next.js 内置分析
- **数据库性能**: 慢查询监控
- **缓存命中率**: Redis 监控
- **错误追踪**: 自定义错误日志

## 扩展性设计

### 水平扩展

- 无状态应用设计，支持多实例部署
- 数据库读写分离
- 静态资源 CDN 加速

### 功能扩展

- 插件化架构，新功能模块独立开发
- 微服务架构预留接口
- 第三方系统集成接口

## 最佳实践

### 1. 代码组织

- 使用 TypeScript 严格模式
- 遵循 ESLint 和 Prettier 规范
- 组件和函数单一职责原则

### 2. 性能优化

- 使用 React.memo 和 useMemo 优化渲染
- 数据库查询优化和索引设计
- 静态资源压缩和缓存

### 3. 错误处理

- 全局错误边界处理
- API 错误统一处理和用户友好提示
- 详细的错误日志记录

### 4. 安全考虑

- 输入验证和 SQL 注入防护
- XSS 和 CSRF 攻击防护
- 敏感数据加密存储

这个架构规范是 Easy ERP Web 项目的基础框架，所有开发活动都应遵循此规范，确保项目的可维护性、可扩展性和高性能。
