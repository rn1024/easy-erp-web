# Easy ERP Web - 数据库和 Prisma 开发规范

## 数据库设计原则

### 1. 命名规范

- **表名**: 使用复数形式，单词间用下划线分隔 (例: `accounts`, `product_categories`)
- **字段名**: 使用小写字母，单词间用下划线分隔 (例: `created_at`, `updated_at`)
- **外键**: 使用 `表名_id` 格式 (例: `account_id`, `role_id`)
- **索引**: 使用 `idx_表名_字段名` 格式 (例: `idx_accounts_name`)

### 2. 数据类型选择

- **ID**: 使用 `cuid()` 生成唯一标识符
- **时间**: 使用 `DateTime` 类型，自动设置 `@default(now())` 和 `@updatedAt`
- **金额**: 使用 `Decimal` 类型，指定精度 `@db.Decimal(12, 2)`
- **状态**: 使用 `enum` 类型，避免魔法字符串
- **文本**: 长文本使用 `@db.Text` 或 `@db.LongText`

### 3. 关系设计

- **一对一**: 使用 `@relation` 明确关系
- **一对多**: 在多的一方添加外键
- **多对多**: 使用中间表，命名为 `表1_表2` 格式

## Prisma Schema 规范

### 1. 基础配置

```prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
```

### 2. 模型定义规范

```prisma
// 账户模型 - 参考 [schema.prisma](mdc:prisma/schema.prisma)
model Account {
  id        String        @id @default(cuid())
  name      String        @unique
  operator  String
  password  String
  status    AccountStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // 关联关系
  roles AccountRole[]
  logs  Log[]

  // 表映射
  @@map("accounts")
}

// 角色模型
model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  status      RoleStatus    @default(ACTIVE)
  operator    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // 关联关系
  accounts    AccountRole[]
  permissions RolePermission[]

  @@map("roles")
}

// 中间表 - 账户角色关联
model AccountRole {
  id        String   @id @default(cuid())
  accountId String
  roleId    String
  createdAt DateTime @default(now())

  // 关联关系
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // 复合唯一索引
  @@unique([accountId, roleId])
  @@map("account_roles")
}

// 枚举定义
enum AccountStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}
```

### 3. 业务模型规范

```prisma
// 店铺模型
model Shop {
  id                String   @id @default(cuid())
  nickname          String   @unique
  avatarUrl         String?
  responsiblePerson String
  remark            String?  @db.Text
  operatorId        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 关联关系
  operator          Account         @relation("ShopOperator", fields: [operatorId], references: [id])
  products          ProductInfo[]
  finishedInventory FinishedInventory[]
  spareInventory    SpareInventory[]

  @@map("shops")
}

// 产品信息模型
model ProductInfo {
  id            String   @id @default(cuid())
  shopId        String
  categoryId    String
  code          String
  specification String?
  color         String?
  setQuantity   Int      @default(1)
  weight        Decimal? @db.Decimal(10, 2)
  sku           String   @unique
  imageUrl      String?
  remark        String?  @db.Text
  operatorId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  shop     Shop            @relation(fields: [shopId], references: [id])
  category ProductCategory @relation(fields: [categoryId], references: [id])
  operator Account         @relation("ProductOperator", fields: [operatorId], references: [id])

  // 索引
  @@index([shopId])
  @@index([categoryId])
  @@index([code])
  @@index([sku])
  @@map("product_info")
}

// 库存模型
model FinishedInventory {
  id            String   @id @default(cuid())
  shopId        String
  productId     String
  boxSize       String?
  packQuantity  Int      @default(1)
  weight        Decimal? @db.Decimal(10, 2)
  location      String?
  stockQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  shop    Shop        @relation(fields: [shopId], references: [id])
  product ProductInfo @relation(fields: [productId], references: [id])

  // 复合索引
  @@index([shopId, productId])
  @@index([location])
  @@map("finished_inventory")
}

// 采购订单模型
model PurchaseOrder {
  id          String               @id @default(cuid())
  shopId      String
  supplierId  String
  productId   String
  quantity    Int
  totalAmount Decimal              @db.Decimal(12, 2)
  status      PurchaseOrderStatus  @default(PENDING)
  urgent      Boolean              @default(false)
  remark      String?              @db.Text
  operatorId  String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // 关联关系
  shop     Shop        @relation(fields: [shopId], references: [id])
  supplier Supplier    @relation(fields: [supplierId], references: [id])
  product  ProductInfo @relation(fields: [productId], references: [id])
  operator Account     @relation("PurchaseOperator", fields: [operatorId], references: [id])

  // 索引
  @@index([shopId, status])
  @@index([supplierId])
  @@index([urgent])
  @@index([createdAt])
  @@map("purchase_orders")
}

// 业务枚举
enum PurchaseOrderStatus {
  PENDING
  CONFIRMED
  PRODUCTION
  SHIPPED
  RECEIVED
  CANCELLED
}
```

## Prisma 客户端使用规范

### 1. 数据库连接配置

```typescript
// src/lib/db.ts
import { PrismaClient } from '@prisma/client';

// 全局类型声明
declare global {
  var prisma: PrismaClient | undefined;
}

// 单例模式创建 Prisma 客户端
export const prisma =
  globalThis.prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },
  });

// 开发环境避免重复创建连接
if (process.env.NODE_ENV !== 'production') {
  globalThis.prisma = prisma;
}

// 优雅关闭连接
process.on('beforeExit', async () => {
  await prisma.$disconnect();
});
```

### 2. 查询操作规范

```typescript
// 基础查询
export async function getAccounts(params: {
  page: number;
  pageSize: number;
  name?: string;
  status?: string;
}) {
  const { page, pageSize, name, status } = params;

  // 构建查询条件
  const where: any = {};
  if (name) {
    where.name = { contains: name };
  }
  if (status) {
    where.status = status;
  }

  // 并行查询数据和总数
  const [accounts, total] = await Promise.all([
    prisma.account.findMany({
      where,
      select: {
        id: true,
        name: true,
        operator: true,
        status: true,
        createdAt: true,
        updatedAt: true,
        // 关联查询
        roles: {
          select: {
            role: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
      },
      skip: (page - 1) * pageSize,
      take: pageSize,
      orderBy: {
        createdAt: 'desc',
      },
    }),
    prisma.account.count({ where }),
  ]);

  return {
    list: accounts,
    page,
    pageSize,
    total,
  };
}

// 复杂查询 - 聚合统计
export async function getInventoryStats(shopId: string) {
  const stats = await prisma.finishedInventory.aggregate({
    where: {
      shopId,
    },
    _sum: {
      stockQuantity: true,
    },
    _avg: {
      weight: true,
    },
    _count: {
      id: true,
    },
  });

  return stats;
}

// 关联查询优化
export async function getProductsWithInventory(shopId: string) {
  return await prisma.productInfo.findMany({
    where: {
      shopId,
    },
    include: {
      category: true,
      finishedInventory: {
        select: {
          id: true,
          stockQuantity: true,
          location: true,
        },
      },
      spareInventory: {
        select: {
          id: true,
          quantity: true,
          spareType: true,
        },
      },
    },
  });
}
```

### 3. 事务操作规范

```typescript
// 简单事务
export async function createAccountWithRoles(data: {
  name: string;
  password: string;
  operator: string;
  roleIds: string[];
}) {
  return await prisma.$transaction(async (tx) => {
    // 创建账户
    const account = await tx.account.create({
      data: {
        name: data.name,
        password: data.password,
        operator: data.operator,
        status: 'ACTIVE',
      },
    });

    // 分配角色
    await tx.accountRole.createMany({
      data: data.roleIds.map((roleId) => ({
        accountId: account.id,
        roleId,
      })),
    });

    return account;
  });
}

// 复杂事务 - 库存操作
export async function updateInventoryTransaction(
  operations: {
    productId: string;
    quantityChange: number;
    type: 'IN' | 'OUT';
    reason: string;
    operatorId: string;
  }[]
) {
  return await prisma.$transaction(async (tx) => {
    for (const op of operations) {
      // 更新库存
      const inventory = await tx.finishedInventory.findFirst({
        where: {
          productId: op.productId,
        },
      });

      if (!inventory) {
        throw new Error(`Product ${op.productId} not found in inventory`);
      }

      const newQuantity =
        inventory.stockQuantity + (op.type === 'IN' ? op.quantityChange : -op.quantityChange);

      if (newQuantity < 0) {
        throw new Error(`Insufficient stock for product ${op.productId}`);
      }

      await tx.finishedInventory.update({
        where: {
          id: inventory.id,
        },
        data: {
          stockQuantity: newQuantity,
        },
      });

      // 记录库存变动日志
      await tx.log.create({
        data: {
          category: 'INVENTORY',
          module: 'WAREHOUSE',
          operation: op.type,
          operatorAccountId: op.operatorId,
          details: {
            productId: op.productId,
            quantityChange: op.quantityChange,
            reason: op.reason,
            previousQuantity: inventory.stockQuantity,
            newQuantity,
          },
        },
      });
    }
  });
}
```

### 4. 原生查询规范

```typescript
// 复杂统计查询
export async function getShopStatistics(shopId: string, startDate: Date, endDate: Date) {
  const result = await prisma.$queryRaw`
    SELECT
      DATE(po.created_at) as date,
      COUNT(po.id) as order_count,
      SUM(po.total_amount) as total_amount,
      AVG(po.total_amount) as avg_amount
    FROM purchase_orders po
    WHERE po.shop_id = ${shopId}
      AND po.created_at >= ${startDate}
      AND po.created_at <= ${endDate}
    GROUP BY DATE(po.created_at)
    ORDER BY date DESC
  `;

  return result;
}

// 库存预警查询
export async function getInventoryAlerts(shopId: string, threshold: number = 10) {
  return await prisma.$queryRaw`
    SELECT
      p.id,
      p.code,
      p.sku,
      fi.stock_quantity,
      pc.name as category_name
    FROM product_info p
    JOIN finished_inventory fi ON p.id = fi.product_id
    JOIN product_categories pc ON p.category_id = pc.id
    WHERE p.shop_id = ${shopId}
      AND fi.stock_quantity <= ${threshold}
    ORDER BY fi.stock_quantity ASC
  `;
}
```

## 数据库迁移规范

### 1. 迁移文件命名

```bash
# 创建迁移
npx prisma migrate dev --name add_user_table
npx prisma migrate dev --name update_product_schema
npx prisma migrate dev --name add_inventory_indexes

# 部署迁移
npx prisma migrate deploy
```

### 2. 迁移最佳实践

```typescript
// 数据迁移脚本示例
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateUserRoles() {
  console.log('开始迁移用户角色数据...');

  // 查询需要迁移的用户
  const users = await prisma.account.findMany({
    where: {
      roles: {
        none: {}, // 没有角色的用户
      },
    },
  });

  console.log(`找到 ${users.length} 个需要迁移的用户`);

  // 批量分配默认角色
  const defaultRole = await prisma.role.findFirst({
    where: {
      name: 'user',
    },
  });

  if (!defaultRole) {
    throw new Error('默认角色不存在');
  }

  for (const user of users) {
    await prisma.accountRole.create({
      data: {
        accountId: user.id,
        roleId: defaultRole.id,
      },
    });
    console.log(`用户 ${user.name} 已分配默认角色`);
  }

  console.log('用户角色迁移完成');
}

// 运行迁移
migrateUserRoles()
  .catch(console.error)
  .finally(() => prisma.$disconnect());
```

### 3. 数据库种子文件

```typescript
// prisma/seed.ts
import { PrismaClient } from '@prisma/client';
import { hashPassword } from '../src/lib/auth';

const prisma = new PrismaClient();

async function main() {
  console.log('开始初始化数据库...');

  // 创建默认权限
  const permissions = await Promise.all([
    prisma.permission.upsert({
      where: { code: 'account:read' },
      update: {},
      create: {
        name: '查看账户',
        code: 'account:read',
        category: 'ACCOUNT',
        description: '查看账户信息',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'account:create' },
      update: {},
      create: {
        name: '创建账户',
        code: 'account:create',
        category: 'ACCOUNT',
        description: '创建新账户',
      },
    }),
    // 更多权限...
  ]);

  console.log(`创建了 ${permissions.length} 个权限`);

  // 创建默认角色
  const adminRole = await prisma.role.upsert({
    where: { name: 'admin' },
    update: {},
    create: {
      name: 'admin',
      status: 'ACTIVE',
      operator: 'system',
    },
  });

  // 分配权限给角色
  await prisma.rolePermission.createMany({
    data: permissions.map((permission) => ({
      roleId: adminRole.id,
      permissionId: permission.id,
    })),
    skipDuplicates: true,
  });

  // 创建管理员账户
  const adminAccount = await prisma.account.upsert({
    where: { name: 'admin' },
    update: {},
    create: {
      name: 'admin',
      password: await hashPassword('123456'),
      operator: 'system',
      status: 'ACTIVE',
    },
  });

  // 分配角色给账户
  await prisma.accountRole.upsert({
    where: {
      accountId_roleId: {
        accountId: adminAccount.id,
        roleId: adminRole.id,
      },
    },
    update: {},
    create: {
      accountId: adminAccount.id,
      roleId: adminRole.id,
    },
  });

  console.log('数据库初始化完成');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
```

## 性能优化规范

### 1. 查询优化

```typescript
// 使用 select 限制返回字段
const users = await prisma.account.findMany({
  select: {
    id: true,
    name: true,
    // 不返回 password 字段
  },
});

// 使用 include 优化关联查询
const usersWithRoles = await prisma.account.findMany({
  include: {
    roles: {
      include: {
        role: true,
      },
    },
  },
});

// 使用 where 条件过滤
const activeUsers = await prisma.account.findMany({
  where: {
    status: 'ACTIVE',
    roles: {
      some: {
        role: {
          status: 'ACTIVE',
        },
      },
    },
  },
});
```

### 2. 索引优化

```prisma
model ProductInfo {
  // 单列索引
  @@index([shopId])
  @@index([code])
  @@index([sku])

  // 复合索引
  @@index([shopId, categoryId])
  @@index([createdAt, status])

  // 唯一索引
  @@unique([sku])
  @@unique([shopId, code])
}
```

### 3. 分页优化

```typescript
// 使用 cursor 分页（推荐用于大数据集）
export async function getProductsCursor(params: { cursor?: string; take: number; shopId: string }) {
  const { cursor, take, shopId } = params;

  const products = await prisma.productInfo.findMany({
    where: {
      shopId,
    },
    take: take + 1, // 多取一个用于判断是否有下一页
    cursor: cursor ? { id: cursor } : undefined,
    orderBy: {
      createdAt: 'desc',
    },
  });

  const hasNextPage = products.length > take;
  const items = hasNextPage ? products.slice(0, -1) : products;

  return {
    items,
    hasNextPage,
    nextCursor: hasNextPage ? items[items.length - 1].id : null,
  };
}
```

这些数据库和 Prisma 规范确保了数据操作的安全性、性能和一致性，是 Easy ERP Web 项目数据层开发的重要基础。
description:
globs:
alwaysApply: false

---
