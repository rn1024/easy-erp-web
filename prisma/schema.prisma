// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 管理员账户表
model Account {
  id        String        @id @default(cuid())
  name      String        @unique
  operator  String
  password  String
  status    AccountStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // 关联关系 - 原有系统
  roles     AccountRole[]
  logs      Log[]

  // 关联关系 - ERP业务扩展
  operatedShops         Shop[]             @relation("ShopOperator")
  operatedSuppliers     Supplier[]         @relation("SupplierOperator")
  operatedForwarders    Forwarder[]        @relation("ForwarderOperator")
  operatedProducts      ProductInfo[]      @relation("ProductOperator")
  operatedPurchases     PurchaseOrder[]    @relation("PurchaseOperator")
  operatedWarehouseTasks WarehouseTask[]   @relation("WarehouseTaskOperator")
  operatedDeliveries    DeliveryRecord[]   @relation("DeliveryOperator")

  // 关联关系 - 审批系统
  approvalRecords       ApprovalRecord[]   @relation("ApprovalRecords")

  @@map("accounts")
}

// 通用审批记录表
model ApprovalRecord {
  id            String      @id @default(cuid())
  entityType    EntityType  // 业务类型：采购订单、销售订单等
  entityId      String      // 关联的业务单据ID
  entityNumber  String      // 业务单据号码 (如订单号)
  approverId    String      // 审批人ID
  fromStatus    String      // 审批前状态 (字符串，支持不同业务的状态)
  toStatus      String      // 审批后状态
  reason        String      // 审批原因
  remark        String?     // 备注信息
  createdAt     DateTime    @default(now())

  // 关联关系
  approver      Account     @relation("ApprovalRecords", fields: [approverId], references: [id])

  // 复合索引优化查询性能
  @@index([entityType, entityId])
  @@index([entityType, entityNumber])
  @@index([approverId])
  @@index([createdAt])
  @@map("approval_records")
}

// 角色表
model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  status      RoleStatus    @default(ACTIVE)
  operator    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // 关联关系
  accounts    AccountRole[]
  permissions RolePermission[]

  @@map("roles")
}

// 权限表
model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  code        String           @unique
  category    String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // 关联关系
  roles       RolePermission[]

  @@map("permissions")
}

// 账户角色关联表
model AccountRole {
  id        String   @id @default(cuid())
  accountId String
  roleId    String
  createdAt DateTime @default(now())

  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([accountId, roleId])
  @@map("account_roles")
}

// 角色权限关联表
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// 系统日志表
model Log {
  id                String   @id @default(cuid())
  category          String
  module            String
  operation         String
  operatorAccountId String
  status            String   @default("SUCCESS")
  details           Json?
  createdAt         DateTime @default(now())

  // 关联关系
  operator          Account  @relation(fields: [operatorAccountId], references: [id])

  @@map("logs")
}

// 导出记录表
model ExportRecord {
  id                String       @id @default(cuid())
  taskId            String       @unique
  type              String
  status            ExportStatus @default(PENDING)
  filename          String?
  downloadUrl       String?
  operatorAccountId String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("export_records")
}

// 枚举定义
enum AccountStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ========== ERP 业务模块扩展 ==========

// 店铺表
model Shop {
  id                String   @id @default(cuid())
  nickname          String   @unique
  avatarUrl         String?
  responsiblePerson String
    remark            String?  @db.Text
  operatorId        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 关联关系
  operator          Account         @relation("ShopOperator", fields: [operatorId], references: [id])
  products          ProductInfo[]
  finishedInventory FinishedInventory[]
  spareInventory    SpareInventory[]
  purchaseOrders    PurchaseOrder[]
  warehouseTasks    WarehouseTask[]
  deliveryRecords   DeliveryRecord[]
  financialReports  FinancialReport[]

  @@map("shops")
}

// 供应商表
model Supplier {
  id             String   @id @default(cuid())
  avatarUrl      String?
  nickname       String   @unique
  contactPerson  String
  contactPhone   String
  companyName    String
  creditCode     String?  @unique
  bankName       String?
  bankAccount    String?
  bankAddress    String?
  productionDays Int      @default(0)
  deliveryDays   Int      @default(0)
  remark         String?  @db.Text
  operatorId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // 关联关系
  operator       Account        @relation("SupplierOperator", fields: [operatorId], references: [id])
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

// 货代表
model Forwarder {
  id            String   @id @default(cuid())
  avatarUrl     String?
  nickname      String   @unique
  contactPerson String
  contactPhone  String
  companyName   String
  creditCode    String?  @unique
  bankName      String?
  bankAccount   String?
  bankAddress   String?
  remark        String?
  operatorId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  operator        Account          @relation("ForwarderOperator", fields: [operatorId], references: [id])
  deliveryRecords DeliveryRecord[]

  @@map("forwarders")
}

// 产品分类表
model ProductCategory {
  id        String        @id @default(cuid())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // 关联关系
  products  ProductInfo[]
  finishedInventory FinishedInventory[]
  spareInventory    SpareInventory[]
  warehouseTasks    WarehouseTask[]

  @@map("product_categories")
}

// 产品信息表
model ProductInfo {
  id            String   @id @default(cuid())
  shopId        String
  categoryId    String
  code          String
  specification String?
  color         String?
  setQuantity   Int      @default(1)
  internalSize  String?
  externalSize  String?
  weight        Decimal? @db.Decimal(10, 2)
  sku           String   @unique
  label         String?
  codeFileUrl   String?
  imageUrl      String?
  styleInfo     String?  @db.Text
  accessoryInfo String?  @db.Text
  remark        String?
  operatorId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  shop             Shop                @relation(fields: [shopId], references: [id])
  category         ProductCategory     @relation(fields: [categoryId], references: [id])
  operator         Account             @relation("ProductOperator", fields: [operatorId], references: [id])
  finishedInventory FinishedInventory[]
  spareInventory   SpareInventory[]
  purchaseOrderItems PurchaseOrderItem[] // 采购订单明细
  warehouseTasks   WarehouseTask[]
  deliveryRecords  DeliveryRecord[]

  @@index([shopId])
  @@index([categoryId])
  @@index([code])
  @@map("product_info")
}

// 成品库存表
model FinishedInventory {
  id            String   @id @default(cuid())
  shopId        String
  categoryId    String
  productId     String
  boxSize       String?
  packQuantity  Int      @default(1)
  weight        Decimal? @db.Decimal(10, 2)
  location      String?
  stockQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  shop     Shop            @relation(fields: [shopId], references: [id])
  category ProductCategory @relation(fields: [categoryId], references: [id])
  product  ProductInfo     @relation(fields: [productId], references: [id])

  @@index([shopId, productId])
  @@index([location])
  @@map("finished_inventory")
}

// 散件库存表
model SpareInventory {
  id         String   @id @default(cuid())
  shopId     String
  categoryId String
  productId  String
  spareType  String?
  location   String?
  quantity   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 关联关系
  shop     Shop            @relation(fields: [shopId], references: [id])
  category ProductCategory @relation(fields: [categoryId], references: [id])
  product  ProductInfo     @relation(fields: [productId], references: [id])

  @@index([shopId, productId, spareType])
  @@map("spare_inventory")
}

// 采购订单表
model PurchaseOrder {
  id          String               @id @default(cuid())
  orderNumber String               @unique // 订单号：CGDD+时间+序号
  shopId      String
  supplierId  String
  totalAmount Decimal              @db.Decimal(12, 2) // 订单总金额
  discountRate Decimal?            @db.Decimal(5, 2) // 优惠率 (%)
  discountAmount Decimal?          @db.Decimal(12, 2) // 优惠金额
  finalAmount Decimal              @db.Decimal(12, 2) // 最终金额
  status      PurchaseOrderStatus  @default(CREATED)
  urgent      Boolean              @default(false)
  remark      String?
  operatorId  String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // 关联关系
  shop     Shop                 @relation(fields: [shopId], references: [id])
  supplier Supplier             @relation(fields: [supplierId], references: [id])
  operator Account              @relation("PurchaseOperator", fields: [operatorId], references: [id])
  items    PurchaseOrderItem[]  // 订单明细

  @@index([shopId, status])
  @@index([supplierId])
  @@index([urgent])
  @@map("purchase_orders")
}

// 采购订单明细表
model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Decimal       @db.Decimal(10, 2) // 单价
  amount          Decimal       @db.Decimal(12, 2) // 小计金额 (quantity * unitPrice)
  taxRate         Decimal       @db.Decimal(5, 2)  // 税率 (%)
  taxAmount       Decimal       @db.Decimal(12, 2) // 税额 (amount * taxRate / 100)
  totalAmount     Decimal       @db.Decimal(12, 2) // 含税总额 (amount + taxAmount)
  remark          String?       // 明细备注
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // 关联关系
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         ProductInfo   @relation(fields: [productId], references: [id])

  @@index([purchaseOrderId])
  @@index([productId])
  @@map("purchase_order_items")
}

// 财务报表表
model FinancialReport {
  id          String   @id @default(cuid())
  shopId      String
  reportMonth String
  details     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  shop Shop @relation(fields: [shopId], references: [id])

  @@unique([shopId, reportMonth])
  @@map("financial_reports")
}

// 仓库任务表
model WarehouseTask {
  id            String              @id @default(cuid())
  shopId        String
  categoryId    String
  productId     String
  totalQuantity Int
  progress      Decimal             @default(0.00) @db.Decimal(5, 2)
  status        WarehouseTaskStatus @default(PENDING)
  type          WarehouseTaskType
  operatorId    String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // 关联关系
  shop     Shop            @relation(fields: [shopId], references: [id])
  category ProductCategory @relation(fields: [categoryId], references: [id])
  product  ProductInfo     @relation(fields: [productId], references: [id])
  operator Account         @relation("WarehouseTaskOperator", fields: [operatorId], references: [id])

  @@index([shopId, status])
  @@index([type, status])
  @@map("warehouse_tasks")
}

// 发货记录表
model DeliveryRecord {
  id                        String              @id @default(cuid())
  shopId                    String
  productId                 String
  totalBoxes                Int
  fbaShipmentCode           String?
  fbaWarehouseCode          String?
  country                   String?
  channel                   String?
  forwarderId               String
  shippingChannel           String?
    warehouseShippingDeadline DateTime?           @db.Date
  warehouseReceiptDeadline  DateTime?           @db.Date
  shippingDetails           String?  @db.Text
  date                      DateTime            @db.Date
  status                    DeliveryRecordStatus @default(PREPARING)
  operatorId                String
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt

  // 关联关系
  shop      Shop      @relation(fields: [shopId], references: [id])
  product   ProductInfo @relation(fields: [productId], references: [id])
  forwarder Forwarder @relation(fields: [forwarderId], references: [id])
  operator  Account   @relation("DeliveryOperator", fields: [operatorId], references: [id])

  @@index([shopId, status])
  @@index([date, status])
  @@index([fbaShipmentCode])
  @@index([forwarderId])
  @@map("delivery_records")
}

// ========== ERP 业务枚举定义 ==========

// 业务实体类型枚举 (通用审批系统)
enum EntityType {
  PURCHASE_ORDER     // 采购订单
  SALES_ORDER       // 销售订单 (预留)
  INVENTORY_TRANSFER // 库存调拨 (预留)
  EXPENSE_REPORT    // 费用报销 (预留)
}

enum PurchaseOrderStatus {
  CREATED      // 已创建 (默认状态)
  PENDING      // 待处理
  CONFIRMED    // 已确认
  PRODUCTION   // 生产中
  SHIPPED      // 已发货
  RECEIVED     // 已收货
  CANCELLED    // 已取消
}

enum WarehouseTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WarehouseTaskType {
  PACKAGING
  SHIPPING
}

enum DeliveryRecordStatus {
  PREPARING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}
