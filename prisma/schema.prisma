generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                     String           @id @default(cuid())
  name                   String           @unique
  operator               String
  password               String
  status                 AccountStatus    @default(ACTIVE)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  roles                  AccountRole[]
  approvalRecords        ApprovalRecord[] @relation("ApprovalRecords")
  exportRecords          ExportRecord[]   @relation("ExportOperator")
  fileUploads            FileUpload[]     @relation("FileUploader")
  operatedForwarders     Forwarder[]      @relation("ForwarderOperator")
  operatedPackagingTasks PackagingTask[]  @relation("PackagingTaskOperator")
  operatedProducts       ProductInfo[]    @relation("ProductOperator")
  operatedPurchases      PurchaseOrder[]  @relation("PurchaseOperator")
  operatedShipments      ShipmentRecord[] @relation("ShipmentOperator")
  operatedShops          Shop[]           @relation("ShopOperator")
  operatedSuppliers      Supplier[]       @relation("SupplierOperator")

  @@map("accounts")
}

model ApprovalRecord {
  id           String     @id @default(cuid())
  entityType   EntityType
  entityId     String
  entityNumber String
  approverId   String
  fromStatus   String
  toStatus     String
  reason       String
  remark       String?
  createdAt    DateTime   @default(now())
  approver     Account    @relation("ApprovalRecords", fields: [approverId], references: [id])

  @@index([entityType, entityId])
  @@index([entityType, entityNumber])
  @@index([approverId])
  @@index([createdAt])
  @@map("approval_records")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  status      RoleStatus       @default(ACTIVE)
  operator    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  accounts    AccountRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  code        String           @unique
  category    String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model AccountRole {
  id        String   @id @default(cuid())
  accountId String
  roleId    String
  createdAt DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([accountId, roleId])
  @@index([roleId], map: "account_roles_roleId_fkey")
  @@map("account_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionId_fkey")
  @@map("role_permissions")
}

model Log {
  id                String   @id @default(cuid())
  category          String
  module            String
  operation         String
  operatorAccountId String?
  status            String   @default("SUCCESS")
  details           Json?
  createdAt         DateTime @default(now())

  @@map("logs")
}

model Shop {
  id                Int                 @id @default(autoincrement())
  nickname          String              @unique
  avatarUrl         String?
  responsiblePerson String
  remark            String?             @db.Text
  operatorId        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  financialReports  FinancialReport[]
  finishedInventory FinishedInventory[]
  packagingTasks    PackagingTask[]
  products          ProductInfo[]
  purchaseOrders    PurchaseOrder[]
  shipmentRecords   ShipmentRecord[]
  operator          Account             @relation("ShopOperator", fields: [operatorId], references: [id])
  spareInventory    SpareInventory[]

  @@index([operatorId], map: "shops_operatorId_fkey")
  @@map("shops")
}

model Supplier {
  id             String          @id @default(cuid())
  avatarUrl      String?
  nickname       String          @unique
  contactPerson  String
  contactPhone   String
  companyName    String
  creditCode     String?         @unique
  bankName       String?
  bankAccount    String?
  bankAddress    String?
  productionDays Int             @default(0)
  deliveryDays   Int             @default(0)
  remark         String?         @db.Text
  operatorId     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchaseOrders PurchaseOrder[]
  operator       Account         @relation("SupplierOperator", fields: [operatorId], references: [id])

  @@index([operatorId], map: "suppliers_operatorId_fkey")
  @@map("suppliers")
}

model Forwarder {
  id                     String                  @id @default(cuid())
  avatarUrl              String?
  nickname               String                  @unique
  contactPerson          String
  contactPhone           String
  companyName            String
  creditCode             String?                 @unique
  bankName               String?
  bankAccount            String?
  bankAddress            String?
  remark                 String?
  operatorId             String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  operator               Account                 @relation("ForwarderOperator", fields: [operatorId], references: [id])
  shipmentProductRecords ShipmentProductRecord[]

  @@index([operatorId], map: "forwarders_operatorId_fkey")
  @@map("forwarders")
}

model ProductCategory {
  id                String              @id @default(cuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  finishedInventory FinishedInventory[]
  products          ProductInfo[]
  spareInventory    SpareInventory[]

  @@map("product_categories")
}

model ProductInfo {
  id                     String                  @id @default(cuid())
  shopId                 Int
  categoryId             String
  code                   String?
  specification          String?
  color                  String?
  setQuantity            Int                     @default(1)
  internalSize           String?
  externalSize           String?
  weight                 Decimal?                @db.Decimal(10, 2)
  sku                    String?                 @unique
  label                  String?
  codeFileUrl            String?
  styleInfo              String?                 @db.Text
  accessoryInfo          String?                 @db.Text
  remark                 String?
  operatorId             String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  asin                   String?
  name                   String?
  labelFileUrl           String?
  outerBoxSize           String?
  packageInnerSize       String?
  packageOuterSize       String?
  packageType            String?
  packageWeight          String?
  entityResources        EntityResource[]
  finishedInventory      FinishedInventory[]
  costs                  ProductCost[]
  images                 ProductImage[]
  category               ProductCategory         @relation(fields: [categoryId], references: [id])
  operator               Account                 @relation("ProductOperator", fields: [operatorId], references: [id])
  shop                   Shop                    @relation(fields: [shopId], references: [id])
  productItems           ProductItem[]
  shipmentProductRecords ShipmentProductRecord[]
  spareInventory         SpareInventory[]
  supplyRecordItems      SupplyRecordItem[]

  @@index([shopId])
  @@index([categoryId])
  @@index([code])
  @@index([operatorId], map: "product_info_operatorId_fkey")
  @@map("product_info")
}

model ProductCost {
  id        String      @id @default(cuid())
  productId String
  costInfo  String?
  price     String?
  unit      String?
  supplier  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  product   ProductInfo @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_costs")
}

model ProductImage {
  id        String      @id @default(cuid())
  productId String
  imageUrl  String
  fileName  String
  fileSize  Int
  sortOrder Int
  isCover   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  product   ProductInfo @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([productId, sortOrder])
  @@index([productId, isCover])
  @@map("product_images")
}

model FinishedInventory {
  id            String          @id @default(cuid())
  shopId        Int
  categoryId    String
  productId     String
  boxSize       String?
  packQuantity  Int             @default(1)
  weight        Decimal?        @db.Decimal(10, 2)
  location      String?
  stockQuantity Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      ProductCategory @relation(fields: [categoryId], references: [id])
  product       ProductInfo     @relation(fields: [productId], references: [id])
  shop          Shop            @relation(fields: [shopId], references: [id])

  @@index([shopId, productId])
  @@index([location])
  @@index([categoryId], map: "finished_inventory_categoryId_fkey")
  @@index([productId], map: "finished_inventory_productId_fkey")
  @@map("finished_inventory")
}

model SpareInventory {
  id         String          @id @default(cuid())
  shopId     Int
  categoryId String
  productId  String
  spareType  String?
  location   String?
  quantity   Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  product    ProductInfo     @relation(fields: [productId], references: [id])
  shop       Shop            @relation(fields: [shopId], references: [id])

  @@index([shopId, productId, spareType])
  @@index([categoryId], map: "spare_inventory_categoryId_fkey")
  @@index([productId], map: "spare_inventory_productId_fkey")
  @@map("spare_inventory")
}

model PurchaseOrder {
  id             String              @id @default(cuid())
  orderNumber    String              @unique
  shopId         Int
  supplierId     String
  totalAmount    Decimal             @db.Decimal(12, 2)
  discountRate   Decimal?            @db.Decimal(5, 2)
  discountAmount Decimal?            @db.Decimal(12, 2)
  finalAmount    Decimal             @db.Decimal(12, 2)
  status         PurchaseOrderStatus @default(CREATED)
  urgent         Boolean             @default(false)
  remark         String?
  operatorId     String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  operator       Account             @relation("PurchaseOperator", fields: [operatorId], references: [id])
  shop           Shop                @relation(fields: [shopId], references: [id])
  supplier       Supplier            @relation(fields: [supplierId], references: [id])

  @@index([shopId, status])
  @@index([supplierId])
  @@index([urgent])
  @@index([operatorId], map: "purchase_orders_operatorId_fkey")
  @@map("purchase_orders")
}

model ProductItem {
  id                String      @id @default(cuid())
  relatedType       String
  relatedId         String
  productId         String
  quantity          Int
  unitPrice         Decimal?    @db.Decimal(10, 2)
  amount            Decimal?    @db.Decimal(12, 2)
  taxRate           Decimal?    @db.Decimal(5, 2)
  taxAmount         Decimal?    @db.Decimal(12, 2)
  totalAmount       Decimal?    @db.Decimal(12, 2)
  completedQuantity Int?
  remark            String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  product           ProductInfo @relation(fields: [productId], references: [id])

  @@index([relatedType, relatedId])
  @@index([productId])
  @@index([relatedType, relatedId, productId])
  @@map("product_items")
}

model FinancialReport {
  id          String   @id @default(cuid())
  shopId      Int
  reportMonth String
  details     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shop        Shop     @relation(fields: [shopId], references: [id])

  @@unique([shopId, reportMonth])
  @@map("financial_reports")
}

model PackagingTask {
  id         String              @id @default(cuid())
  shopId     Int
  type       PackagingTaskType   @default(PACKAGING)
  progress   Float?              @default(0)
  status     PackagingTaskStatus @default(PENDING)
  operatorId String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  operator   Account             @relation("PackagingTaskOperator", fields: [operatorId], references: [id])
  shop       Shop                @relation(fields: [shopId], references: [id])

  @@index([shopId])
  @@index([status])
  @@index([operatorId])
  @@map("packaging_tasks")
}

model ShipmentRecord {
  id                        String                  @id @default(cuid())
  shopId                    Int
  country                   String?
  channel                   String?
  shippingChannel           String?
  warehouseShippingDeadline DateTime?               @db.Date
  warehouseReceiptDeadline  DateTime?               @db.Date
  shippingDetails           String?                 @db.Text
  date                      DateTime                @db.Date
  status                    ShipmentRecordStatus    @default(PREPARING)
  operatorId                String
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  shipmentFile              String?
  shipmentProducts          ShipmentProductRecord[]
  operator                  Account                 @relation("ShipmentOperator", fields: [operatorId], references: [id])
  shop                      Shop                    @relation(fields: [shopId], references: [id])

  @@index([shopId, status])
  @@index([date, status])
  @@index([operatorId], map: "shipment_records_operatorId_fkey")
  @@map("shipment_records")
}

model ShipmentProductRecord {
  id               String         @id @default(cuid())
  shipmentRecordId String
  productId        String
  forwarderId      String?
  totalBoxes       Int
  fbaShipmentCode  String?
  fbaWarehouseCode String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  forwarder        Forwarder?     @relation(fields: [forwarderId], references: [id])
  product          ProductInfo    @relation(fields: [productId], references: [id])
  shipmentRecord   ShipmentRecord @relation(fields: [shipmentRecordId], references: [id], onDelete: Cascade)

  @@index([shipmentRecordId])
  @@index([productId])
  @@index([forwarderId])
  @@index([fbaShipmentCode])
  @@map("shipment_product_records")
}

model SupplyShareLink {
  id              String              @id @default(cuid())
  purchaseOrderId String
  shareCode       String              @unique
  extractCode     String?
  expiresAt       DateTime
  accessLimit     Int?
  accessCount     Int                 @default(0)
  status          String              @default("active")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  uniqueUserCount Int                 @default(0)
  supplyRecords   SupplyRecord[]
  accessRecords   SupplyShareAccess[]

  @@index([shareCode])
  @@index([purchaseOrderId])
  @@index([expiresAt, status])
  @@map("supply_share_links")
}

model SupplyShareAccess {
  id              String          @id @default(cuid())
  shareCode       String
  userToken       String
  userFingerprint String
  ipAddress       String
  userAgent       String          @db.Text
  firstAccessAt   DateTime
  lastAccessAt    DateTime
  accessCount     Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  shareLink       SupplyShareLink @relation(fields: [shareCode], references: [shareCode])

  @@index([shareCode])
  @@index([userFingerprint, shareCode])
  @@index([userToken, shareCode])
  @@map("supply_share_access")
}

model SupplyRecord {
  id              String             @id @default(cuid())
  purchaseOrderId String
  shareCode       String
  supplierInfo    Json
  status          String             @default("active")
  totalAmount     Decimal            @default(0.00) @db.Decimal(12, 2)
  remark          String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  items           SupplyRecordItem[]
  shareLink       SupplyShareLink    @relation(fields: [shareCode], references: [shareCode])

  @@index([purchaseOrderId])
  @@index([shareCode])
  @@index([status])
  @@index([createdAt])
  @@map("supply_records")
}

model SupplyRecordItem {
  id             String       @id @default(cuid())
  supplyRecordId String
  productId      String
  quantity       Int
  unitPrice      Decimal      @db.Decimal(10, 2)
  totalPrice     Decimal      @db.Decimal(12, 2)
  remark         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  product        ProductInfo  @relation(fields: [productId], references: [id])
  supplyRecord   SupplyRecord @relation(fields: [supplyRecordId], references: [id], onDelete: Cascade)

  @@index([supplyRecordId])
  @@index([productId])
  @@map("supply_record_items")
}

model ExportRecord {
  id          String       @id @default(cuid())
  status      ExportStatus @default(PENDING)
  downloadUrl String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?
  exportType  String
  fileName    String
  fileSize    Int?
  filters     Json?
  operatorId  String
  operator    Account      @relation("ExportOperator", fields: [operatorId], references: [id])

  @@index([operatorId])
  @@index([status])
  @@index([exportType])
  @@index([createdAt])
  @@map("export_records")
}

model FileUpload {
  id           String   @id @default(cuid())
  originalName String
  fileName     String
  fileUrl      String
  fileSize     Int
  fileType     String
  category     String
  storage      String   @default("oss")
  uploaderId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploader     Account  @relation("FileUploader", fields: [uploaderId], references: [id])

  @@index([uploaderId])
  @@index([category])
  @@index([fileType])
  @@index([createdAt])
  @@map("file_uploads")
}

model EntityResource {
  id          String      @id @default(cuid())
  entityType  String
  entityId    String
  resourceUrl String
  fileName    String?
  createdAt   DateTime    @default(now())
  productInfo ProductInfo @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([entityId], map: "entity_resources_entityId_fkey")
  @@map("entity_resources")
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EntityType {
  PURCHASE_ORDER
  SALES_ORDER
  INVENTORY_TRANSFER
  EXPENSE_REPORT
}

enum PurchaseOrderStatus {
  CREATED
  PENDING
  APPROVED
  CONFIRMED
  PRODUCTION
  SHIPPED
  RECEIVED
  CANCELLED
}

enum ShipmentRecordStatus {
  PREPARING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PackagingTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PackagingTaskType {
  PACKAGING
}
